@startuml SequenceDiagram
title Create Course

actor User
participant ": Frontend" as Frontend
participant ": Router" as Router
participant ": Middleware" as Middleware
participant ": ClassController" as ClassController
participant ": ClassService" as ClassService
participant ": ClassRepository" as ClassRepository
participant ": CourseController" as CourseController
participant ": CourseService" as CourseService
participant ": CourseRepository" as CourseRepository
database Database

activate Frontend #LightBlue

' 1. User requests managed classes
Frontend -> Router: GET /api/classes/managed
activate Router #LightGreen

Router -> Middleware: .Use(Middleware)
activate Middleware #LightPink
Middleware -> Middleware: .Verify()

alt Unauthorized
  Middleware --> Router: 401 Unauthorized
  deactivate Middleware
  Router --> Frontend: 401 Unauthorized
  deactivate Router
  Frontend --> User: Show error "Please log in"
else Authorized
  Middleware --> Router: Continue
  deactivate Middleware

  Router -> ClassController: .GetManagedClasses()
  activate ClassController #LightBlue
  ClassController -> ClassService: .GetManagedClasses()
  activate ClassService #LightGreen
  ClassService -> ClassRepository: .GetClassesByOwner(userId)
  activate ClassRepository #LightPink
  ClassRepository -> Database: SELECT class_id, title FROM Classes WHERE user_id = @userId
  activate Database #LightGray
  Database --> ClassRepository: Classes
  deactivate Database
  ClassRepository --> ClassService: Classes
  deactivate ClassRepository
  ClassService --> ClassController: Classes
  deactivate ClassService

  alt Error occurred
    ClassController --> Router: 500 Internal Server Error
    deactivate ClassController
    Router --> Frontend: 500 Internal Server Error
    deactivate Router
    Frontend --> User: Show error "Failed to fetch classes"
  else No classes found
    ClassController --> Router: 204 No Content
    deactivate ClassController
    Router --> Frontend: 204 No Content
    deactivate Router
    Frontend --> User: Show message "No classes found"
  else
    ClassController --> Router: 200 OK
    deactivate ClassController
    Router --> Frontend: 200 OK
    deactivate Router
    Frontend --> User: Show managed classes list
  end
end

opt User creates new course
  User -> Frontend: .handleCreateCourseClick(classId)
  Frontend --> User: Show course creation form

  User -> Frontend: .submitCourseForm(classId, title, description, difficultyLevel)
  Frontend -> Frontend: ValidateCourseData(title, description, difficultyLevel)

  alt Invalid data
    Frontend --> User: Show error "Invalid course data"
  else Valid data
    Frontend -> Router: POST /api/classes/{classId}/courses
    activate Router #LightGreen

    Router -> Middleware: .Use(Middleware)
    activate Middleware #LightPink
    Middleware -> Middleware: .Verify()

    alt Unauthorized
      Middleware --> Router: 401 Unauthorized
      deactivate Middleware
      Router --> Frontend: 401 Unauthorized
      deactivate Router
      Frontend --> User: Show error "Please log in"
    else Authorized
      Middleware --> Router: Continue
      deactivate Middleware

      Router -> CourseController: .CreateCourse(classId, title, description, difficultyLevel)
      activate CourseController #LightBlue
      CourseController -> CourseService: .CreateCourse(classId, title, description, difficultyLevel)
      activate CourseService #LightGreen

      ' Verify class ownership
      CourseService -> ClassRepository: .VerifyOwnership(userId, classId)
      activate ClassRepository #LightPink
      ClassRepository -> Database: SELECT 1 FROM Classes WHERE class_id = @classId AND user_id = @userId
      activate Database #LightGray
      Database --> ClassRepository: isOwner
      deactivate Database
      ClassRepository --> CourseService: isOwner
      deactivate ClassRepository

      alt Not owner
        CourseService --> CourseController: Error "Not class owner"
        deactivate CourseService
        CourseController --> Router: 403 Forbidden
        deactivate CourseController
        Router --> Frontend: 403 Forbidden
        deactivate Router
        Frontend --> User: Show error "Not authorized"
      else
        ' Create new course
        CourseService -> CourseRepository: .CreateCourse(classId, title, description, difficultyLevel)
        activate CourseRepository #LightPink
        CourseRepository -> Database: INSERT INTO Courses (class_id, title, description, difficulty_level, number) \nVALUES (@classId, @title, @description, @difficultyLevel, \n(SELECT COALESCE(MAX(number),0)+1 FROM Courses WHERE class_id = @classId))
        activate Database #LightGray
        Database --> CourseRepository: newCourseId
        deactivate Database
        CourseRepository --> CourseService: newCourse
        deactivate CourseRepository

        CourseService --> CourseController: newCourse
        deactivate CourseService
        CourseController --> Router: 201 Created
        deactivate CourseController
        Router --> Frontend: 201 Created
        deactivate Router
        Frontend --> User: Show success "Course created successfully"
      end
    end
  end
end

deactivate Frontend
@enduml