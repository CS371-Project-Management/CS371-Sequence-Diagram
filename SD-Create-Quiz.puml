@startuml SequenceDiagram
title Create Quiz

actor User
participant ": Frontend" as Frontend
participant ": Router" as Router
participant ": Middleware" as Middleware

participant ": ClassController" as ClassController
participant ": ClassService" as ClassService
participant ": ClassRepository" as ClassRepository

participant ": CourseController" as CourseController
participant ": CourseService" as CourseService
participant ": CourseRepository" as CourseRepository

participant ": QuizController" as QuizController
participant ": QuizService" as QuizService
participant ": QuizRepository" as QuizRepository

database Database

activate Frontend


Frontend -> Router: GET /api/classes
activate Router

Router -> Middleware: .Use(Middleware)
activate Middleware
Middleware -> Middleware : .Verify()

alt Unauthorized (401 Unauthorized)
  Middleware -->> Router: 401 Unauthorized
  Router -->> Frontend: 401 Unauthorized
  Frontend -->> User: Show error "Please log in"
else Authorized
  Middleware -->> Router: Route to Router
  deactivate Middleware
  Router -> ClassController: .GetAllClasses()
  activate ClassController
  ClassController -> ClassService: .GetAllClasses()
  activate ClassService
  ClassService -> ClassRepository: .GetAllClasses()
  activate ClassRepository
  ClassRepository -> Database: SELECT * FROM classes WHERE owner_id = @user_id
  activate Database
  Database -->> ClassRepository : Classes, Error
  deactivate Database
  ClassRepository -->> ClassService : Classes, Error
  deactivate ClassRepository
  ClassService -->> ClassController : Classes, Error
  deactivate ClassService
  alt Error != Null
    ClassController -->> Router : 500 Internal Server Error
    Router -->> Frontend : 500 Internal Server Error
    Frontend -->> User : Show error "Failed to fetch classes"
  else Classes == Null
    ClassController -->> Router : 404 Not Found
    Router -->> Frontend : 404 Not Found
    Frontend -->> User : Show message "Class not found"
  else
    ClassController -->> Router : 200 OK
    Router -->> Frontend : 200 OK
    Frontend -->> User : Show classes list
  end
  deactivate ClassController
  deactivate Router

  opt User selects a class
    User -> Frontend: .handleClassClick(classId)
    Frontend -> Router: GET /api/courses/{classId}
    activate Router

    Router -> Middleware: .Use(Middleware)
    activate Middleware
    Middleware -> Middleware : .Verify()
    alt Unauthorized (401 Unauthorized)
      Middleware -->> Router: 401 Unauthorized
      Router -->> Frontend: 401 Unauthorized
      Frontend -->> User: Show error "Please log idn"
    else Authorized
      Middleware -->> Router: Route to Router
      deactivate Middleware
      Router -> CourseController: .GetAllCourses(classId)
      activate CourseController
      CourseController -> CourseService: .GetAllCourses(classId)
      activate CourseService
      CourseService -> CourseRepository: .GetAllCourses(classId)
      activate CourseRepository
      CourseRepository -> Database: SELECT * FROM courses WHERE class_id = @class_id
      activate Database
      Database -->> CourseRepository : Courses, Error
      deactivate Database
      CourseRepository -->> CourseService : Courses, Error
      deactivate CourseRepository
      CourseService -->> CourseController : Courses, Error
      deactivate CourseService
      alt Error != Null
        CourseController -->> Router : 500 Internal Server Error
        Router -->> Frontend : 500 Internal Server Error
        Frontend -->> User : Show error "Failed to fetch courses"
      else Courses == Null
        CourseController -->> Router : 404 Not Found
        Router -->> Frontend : 404 Not Found
        Frontend -> User: Show message "Course not found"
      else
        CourseController -->> Router : 200 OK
        Router -->> Frontend : 200 OK
        Frontend -->> User : Show courses list
      end
      deactivate CourseController
      deactivate Router
      
      opt User selects a course
        User -> Frontend: .handleCourseClick(courseId)
        Frontend -> User: Show course details
        User -> Frontend : handleCreateQuizClick(courseId)
        Frontend -->> User : Show quiz creation form
        User -> Frontend : handleInputContent(content)

        User -> Frontend : handleSelectQuizType(quiz_type)
        alt quiz_type == single_choice
          Frontend -->> User : Show single choice quiz form
          User -> Frontend : handleInputQuestions(questions)
          User -> Frontend : handleInputChoices(choices)
          User -> Frontend : handleInputSingleAnswers(answers)
        else quiz_type == multiple_choice
          Frontend -->> User : Show multiple choice quiz form
          User -> Frontend : handleInputQuestions(questions)
          User -> Frontend : handleInputChoices(choices)
          User -> Frontend : handleInputMultipleAnswers(answers) 
        else quiz_type == ordering_choice
          Frontend -->> User : Show ordering choice quiz form
          User -> Frontend : handleInputQuestions(questions)
          User -> Frontend : handleInputChoices(choices)
          User -> Frontend : handleInputOrderingAnswers(answers)
        else quiz_type == missing_word_choice
          Frontend -->> User : Show missing word choice quiz form
          User -> Frontend : handleInputQuestions(questions)
          User -> Frontend : handleInputChoices(choices)
          User -> Frontend : handleInputMissingWordAnswers(answers)
        end
        
        User -> Frontend : handleSubmitQuizClick(courseId, content, quiz_type, questions, choices, answers)
        Frontend -> Frontend : Validate quiz data
        alt Invalid Data
          Frontend -->> User : Show error "Invalid input"
        else Valid Data
          Frontend -> Router: POST /api/quizzes
          activate Router
          Router -> Middleware: .Use(Middleware)
          activate Middleware
          Middleware -> Middleware : .Verify()
          alt Unauthorized (401 Unauthorized)
            Middleware -->> Router: 401 Unauthorized
            Router -->> Frontend: 401 Unauthorized
            Frontend -->> User: Show error "Please log in"
          else Authorized
            Middleware -->> Router: Route to Router
            deactivate Middleware
            Router -> QuizController: .CreateQuiz(courseId, content, quiz_type, questions, choices, answers)
            activate QuizController
            QuizController -> QuizService: .CreateQuiz(courseId, content, quiz_type, questions, choices, answers)
            activate QuizService
            alt quiz_type == single_choice
              QuizService -> QuizRepository: .CreateSingleChoiceQuiz(courseId, content, questions, choices, answers)
              QuizRepository -> Database: INSERT INTO quizzes (course_id, content, type, questions, choices, answers) VALUES (@course_id, @content, @type, @questions, @choices, @answers)
            else quiz_type == multiple_choice
              QuizService -> QuizRepository: .CreateMultipleChoiceQuiz(courseId, content, questions, choices, answers)
              QuizRepository -> Database: INSERT INTO quizzes (course_id, content, type, questions, choices, answers) VALUES (@course_id, @content, @type, @questions, @choices, @answers)
            else quiz_type == ordering_choice
              QuizService -> QuizRepository: .CreateOrderingChoiceQuiz(courseId, content, questions, choices, answers)
              QuizRepository -> Database: INSERT INTO quizzes (course_id, content, type, questions, choices, answers) VALUES (@course_id, @content, @type, @questions, @choices, @answers)
            else quiz_type == missing_word_choice
              QuizService -> QuizRepository: .CreateMissingWordChoiceQuiz(courseId, content, questions, choices, answers)
              QuizRepository -> Database: INSERT INTO quizzes (course_id, content, type, questions, choices, answers) VALUES (@course_id, @content, @type, @questions, @choices, @answers)
            end
            activate Database

            Database -->> QuizRepository : Quiz, Error
            deactivate Database
            QuizRepository -->> QuizService : Quiz, Error
            deactivate QuizRepository
            QuizService -->> QuizController : Quiz, Error
            deactivate QuizService
            alt Error != Null
              QuizController -->> Router : 500 Internal Server Error
              Router -->> Frontend : 500 Internal Server Error
              Frontend -->> User : Show error "Quiz creation failed"
            else
              QuizController -->> Router : 201 Created
              Router -->> Frontend : 201 Created
              Frontend -->> User : Show success "Quiz created"
            end
            deactivate QuizController
            deactivate Router
          end
        end
      end
    end
  end
end
@enduml
