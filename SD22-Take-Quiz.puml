@startuml
title Take Quiz

actor "ผู้ใช้" as User
participant "Frontend" as FE
participant "Router" as Router
participant "Middleware" as MW

' --- Class Module ---
participant "Class Controller" as ClassCtrl
participant "Class Service" as ClassServ
participant "Class Repository" as ClassRepo

' --- Course Module ---
participant "Course Controller" as CourseCtrl
participant "Course Service" as CourseServ
participant "Course Repository" as CourseRepo

' --- Quiz Module ---
participant "Quiz Controller" as QuizCtrl
participant "Quiz Service" as QuizServ
participant "Quiz Repository" as QuizRepo

participant "Database" as DB

'==================== Phase 1: ดึงข้อมูล Class ====================
FE -> Router: GET /api/classes?joined=true
activate Router
Router -> MW: validateSession()
activate MW
MW -> ClassCtrl: getJoinedClasses(userID)
deactivate MW
activate ClassCtrl
ClassCtrl -> ClassServ: getJoinedClasses(userID)
activate ClassServ
ClassServ -> ClassRepo: selectJoinedClasses(userID)
activate ClassRepo
ClassRepo -> DB: SELECT (c.class_id, c.title, c.description) FROM Classes c INNER JOIN User_Classes uc ON c.class_id = uc.class_id WHERE uc.user_id = <user_id>
activate DB
DB --> ClassRepo: [classList]
deactivate DB
alt ไม่พบข้อมูล class
    ClassRepo --> ClassServ: []
    ClassServ -> ClassCtrl: returnError("ไม่พบข้อมูล class")
    ClassCtrl -> Router: errorResponse(404, "ไม่พบข้อมูล class")
    Router --> FE: errorResponse(404, "ไม่พบข้อมูล class")
    FE -> User: แสดงข้อความ "ไม่พบข้อมูล class"
else พบข้อมูล class
    ClassRepo --> ClassServ: [classList]
    ClassServ --> ClassCtrl: [classList]
    ClassCtrl --> Router: successResponse(200, classList)
    Router --> FE: successResponse(200, classList)
    FE -> User: แสดงรายการ class
end
deactivate ClassCtrl
deactivate Router

'==================== Phase 2: ดึงข้อมูล Course ====================
User -> FE: เลือก class ที่ต้องการ
FE -> Router: GET /api/courses?classID={classID}
activate Router
Router -> MW: validateRequest()
activate MW
MW -> CourseCtrl: getCourses(classID)
deactivate MW
activate CourseCtrl
CourseCtrl -> CourseServ: getCourses(classID)
activate CourseServ
CourseServ -> CourseRepo: selectCoursesByClass(classID)
activate CourseRepo
CourseRepo -> DB: SELECT  c.course_id, c.title, c.description, c.difficulty_level, ( SELECT COUNT(DISTINCT q.quiz_id) FROM Quizzes q WHERE q.course_id = c.course_id ) AS total_quizzes, ( SELECT COUNT(DISTINCT qh.quiz_id )
activate DB
DB --> CourseRepo: [courseList]
deactivate DB
alt ไม่พบข้อมูล course
     CourseRepo --> CourseServ: []
     CourseServ -> CourseCtrl: returnError("ไม่พบข้อมูล course")
     CourseCtrl -> Router: errorResponse(404, "ไม่พบข้อมูล course")
     Router --> FE: errorResponse(404, "ไม่พบข้อมูล course")
     FE -> User: แสดงข้อความ "ไม่พบข้อมูล course"
else พบข้อมูล course
     CourseRepo --> CourseServ: [courseList]
     CourseServ --> CourseCtrl: [courseList]
     CourseCtrl --> Router: successResponse(200, courseList)
     Router --> FE: successResponse(200, courseList)
     FE -> User: แสดงรายการ course
end
deactivate CourseCtrl
deactivate Router

'==================== Phase 3: ดึงข้อมูล Quiz ====================
User -> FE: เลือก course ที่ต้องการ
FE -> Router: GET /api/quizzes?courseID={courseID}
activate Router
Router -> MW: validateRequest()
activate MW
MW -> QuizCtrl: getQuizzes(courseID)
deactivate MW
activate QuizCtrl
QuizCtrl -> QuizServ: getQuizzes(courseID)
activate QuizServ
QuizServ -> QuizRepo: selectQuizzesByCourse(courseID)
activate QuizRepo

' ดึงข้อมูล quiz หลัก (7.1)
QuizRepo -> DB: SELECT quiz_id, course_id, number, quiz_type, lesson, point FROM Quizzes WHERE course_id = <course_id>;
activate DB
DB --> QuizRepo: [quizBaseList]
deactivate DB

' ดึงข้อมูล choice_quizzes (7.2)
QuizRepo -> DB: SELECT cq.quiz_id, cq.question, cq.type FROM Choice_Quizzes cq JOIN Quizzes q ON q.quiz_id = cq.quiz_id WHERE q.course_id = <course_id>
activate DB
DB --> QuizRepo: [choiceQuizzes]
deactivate DB

' ดึงข้อมูล choice_answers (7.3)
QuizRepo -> DB: SELECT ca.choice_answer_id, ca.quiz_id, ca.answer, ca.result FROM Choice_Answers ca JOIN Quizzes q ON q.quiz_id = ca.quiz_id WHERE q.course_id = <course_id>
activate DB
DB --> QuizRepo: [choiceAnswers]
deactivate DB

' ดึงข้อมูล ordering_quizzes (7.4)
QuizRepo -> DB: SELECT oq.quiz_id, oq.question FROM Ordering_Quizzes oq JOIN Quizzes q ON q.quiz_id = cq.quiz_id WHERE q.course_id = <course_id>
activate DB
DB --> QuizRepo: [orderingQuizzes]
deactivate DB

' ดึงข้อมูล ordering_answers (7.5)
QuizRepo -> DB: SELECT oa.ordering_answer_id, ca.quiz_id, ca.answer, ca.order FROM Ordering_Answers oa JOIN Quizzes q ON q.quiz_id = ca.quiz_id WHERE q.course_id = <course_id>
activate DB
DB --> QuizRepo: [orderingAnswers]
deactivate DB

' ดึงข้อมูล missing_words_quizzes (7.6)
QuizRepo -> DB: SELECT mwq.quiz_id, mwq.question, mqw.answer FROM Missing_Words_Quizzes mwq JOIN Quizzes q ON q.quiz_id = cq.quiz_id WHERE q.course_id = <course_id>
activate DB
DB --> QuizRepo: [missingWordsQuizzes]
deactivate DB

QuizRepo --> QuizServ: [quizBaseList, choiceQuizzes, choiceAnswers, orderingQuizzes, orderingAnswers, missingWordsQuizzes]
deactivate QuizRepo
alt ไม่พบข้อมูล quiz
    QuizServ -> QuizCtrl: returnError("ไม่พบข้อมูล quiz")
    QuizCtrl -> Router: errorResponse(404, "ไม่พบข้อมูล quiz")
    Router --> FE: errorResponse(404, "ไม่พบข้อมูล quiz")
    FE -> User: แสดงข้อความ "ไม่พบข้อมูล quiz"
else พบข้อมูล quiz
    QuizServ --> QuizCtrl: [quizList]
    QuizCtrl --> Router: successResponse(200, quizList)
    Router --> FE: successResponse(200, quizList)
    FE -> User: แสดงรายการ quiz
end
deactivate QuizCtrl
deactivate Router

'==================== Phase 4: ดึงข้อมูลประวัติการทำ Quiz ====================
User -> FE: เลือก quiz ที่ต้องการ
FE -> Router: GET /api/quizHistory?quizID={quizID}
activate Router
Router -> MW: validateRequest()
activate MW
MW -> QuizCtrl: getQuizHistory(quizID, userID)
deactivate MW
activate QuizCtrl
QuizCtrl -> QuizServ: getQuizHistory(quizID, userID)
activate QuizServ
QuizServ -> QuizRepo: selectQuizHistory(quizID, userID)
activate QuizRepo

' ดึงข้อมูล quiz_histories (10.1)
QuizRepo -> DB: SELECT qh.* FROM Quiz_Histories qh JOIN Quizzes q ON qh.quiz_id = q.quiz_id JOIN Courses c ON q.course_id = c.course_id
activate DB
DB --> QuizRepo: [quizHistories]
deactivate DB

' ดึงข้อมูล choice_histories (10.2a.1)
QuizRepo -> DB: SELECT ch.choice_history_id, ch.quiz_history_id, ch.answer, ch.result FROM Choice_Histories ch JOIN Quiz_Histories qh ON qh.quiz_history_id = ch.quiz_history_id WHERE ch.quiz_id = <quiz_id>
activate DB
DB --> QuizRepo: [choiceHistories]
deactivate DB

' ดึงข้อมูล ordering_histories (10.2b.1)
QuizRepo -> DB: SELECT oh.ordering_history_id, oh.quiz_history_id, oh.answer, oh.result, oh.order FROM Ordering_Histories oh JOIN Quiz_Histories qh ON qh.quiz_history_id = oh.quiz_history_id WHERE ch.quiz_id = <quiz_id>
activate DB
DB --> QuizRepo: [orderingHistories]
deactivate DB

' ดึงข้อมูล missing_words_histories (10.2c.1)
QuizRepo -> DB: SELECT mwh.missing_words_history_id, mwh.quiz_history_id, mwh.answer, mwh.result FROM Missing_Words_Histories mwh JOIN Quiz_Histories qh ON qh.quiz_history_id =mwh.quiz_history_id WHERE ch.quiz_id = <quiz_id>
activate DB
DB --> QuizRepo: [missingWordsHistories]
deactivate DB

QuizRepo --> QuizServ: [quizHistories, choiceHistories, orderingHistories, missingWordsHistories]
deactivate QuizRepo
QuizServ --> QuizCtrl: [quizHistory]
alt ไม่พบประวัติ
     QuizCtrl -> Router: successResponse(200, "noHistory")
     Router --> FE: successResponse(200, "noHistory")
     FE -> User: แสดง quiz โดยไม่มีประวัติ
else พบประวัติ
     QuizCtrl -> Router: successResponse(200, quizHistory)
     Router --> FE: successResponse(200, quizHistory)
     FE -> User: แสดง quiz พร้อมประวัติ
end
deactivate QuizCtrl
deactivate Router

'==================== Phase 5: ผู้ใช้ทำ Quiz และส่งคำตอบ ====================
User -> FE: ทำแบบทดสอบและกด "บันทึกคำตอบ"
FE -> Router: POST /api/quizAnswers
activate Router
Router -> MW: validateRequest()
activate MW
MW -> QuizCtrl: saveQuizAnswers(answersData, userID, quizID)
deactivate MW
activate QuizCtrl
QuizCtrl -> QuizServ: saveQuizAnswers(answersData, userID, quizID)
activate QuizServ

alt ข้อมูลไม่ครบถ้วน
    QuizServ -> QuizCtrl: returnError("ข้อมูลไม่ครบถ้วน")
    QuizCtrl -> Router: errorResponse(400, "ข้อมูลไม่ครบถ้วน")
    Router --> FE: errorResponse(400, "ข้อมูลไม่ครบถ้วน")
    FE -> User: แสดงข้อความ "ข้อมูลไม่ครบถ้วน"
else ข้อมูลครบถ้วน
    ' เลือก branch ตามประเภทของ Quiz (mutually exclusive)
    alt Quiz ประเภท Single Choice
         '-------------------------------------------
         ' UC 22 : 17a.1.1 - INSERT quiz history สำหรับ Single Choice
         '-------------------------------------------
         QuizServ -> QuizRepo: insertQuizHistory_Single(answersData, userID, quizID)
         activate QuizRepo
         QuizRepo -> DB: INSERT INTO Quiz_Histories (quiz_history_id, quiz_id, user_id, point, quiz_type, note, status) VALUES (<quiz_history_id>, <quiz_id>, <user_id>, <point>, 'single', <note>, <status>);
         activate DB
         DB --> QuizRepo: success
         deactivate DB
         QuizRepo --> QuizServ: success (17a.1.1)

         '-------------------------------------------
         ' UC 22 : 17a.1.2 - INSERT choice history สำหรับ Single Choice
         '-------------------------------------------
         QuizServ -> QuizRepo: insertChoiceHistory_Single(answersData)
         activate QuizRepo
         QuizRepo -> DB: INSERT INTO Choice_Histories (choice_history_id, quiz_history_id, answer, result) VALUES (<choice_history_id>, <quiz_history_id>, <answer>, <result>);
         activate DB
         DB --> QuizRepo: success
         deactivate DB
         QuizRepo --> QuizServ: success (17a.1.2)
    else Quiz ประเภท Multiple Choice
         '-------------------------------------------
         ' UC 22 : 17b.1.1 - INSERT quiz history สำหรับ Multiple Choice
         '-------------------------------------------
         QuizServ -> QuizRepo: insertQuizHistory_Multiple(answersData, userID, quizID)
         activate QuizRepo
         QuizRepo -> DB: INSERT INTO Quiz_Histories (quiz_history_id, quiz_id, user_id, point, quiz_type, note, status) VALUES (<quiz_history_id>, <quiz_id>, <user_id>, <point>, 'multiple', <note>, <status>);
         activate DB
         DB --> QuizRepo: success
         deactivate DB
         QuizRepo --> QuizServ: success (17b.1.1)

         '-------------------------------------------
         ' UC 22 : 17b.1.2 - INSERT choice history สำหรับ Multiple Choice
         '-------------------------------------------
         QuizServ -> QuizRepo: insertChoiceHistory_Multiple(answersData)
         activate QuizRepo
         QuizRepo -> DB: INSERT INTO Choice_Histories (choice_history_id, quiz_history_id, answer, result) VALUES (<choice_history_id>, <quiz_history_id>, <answer>, <result>);
         activate DB
         DB --> QuizRepo: success
         deactivate DB
         QuizRepo --> QuizServ: success (17b.1.2)
    else Quiz ประเภท Ordering
         '-------------------------------------------
         ' UC 22 : 17c.1.1 - INSERT quiz history สำหรับ Ordering
         '-------------------------------------------
         QuizServ -> QuizRepo: insertQuizHistory_Ordering(answersData, userID, quizID)
         activate QuizRepo
         QuizRepo -> DB: INSERT INTO Quiz_Histories (quiz_history_id, quiz_id, user_id, point, quiz_type, note, status) VALUES (<quiz_history_id>, <quiz_id>, <user_id>, <point>, 'ordering', <note>, <status>);
         activate DB
         DB --> QuizRepo: success
         deactivate DB
         QuizRepo --> QuizServ: success (17c.1.1)

         '-------------------------------------------
         ' UC 22 : 17c.1.2 - INSERT ordering history สำหรับ Ordering
         '-------------------------------------------
         QuizServ -> QuizRepo: insertOrderingHistory(answersData)
         activate QuizRepo
         QuizRepo -> DB: INSERT INTO Ordering_Histories (ordering_history_id, quiz_history_id, answer, order, result) VALUES (<ordering_history_id>, <quiz_history_id>, <answer>, <order>, <result>);
         activate DB
         DB --> QuizRepo: success
         deactivate DB
         QuizRepo --> QuizServ: success (17c.1.2)
    else Quiz ประเภท Missing Words
         '-------------------------------------------
         ' UC 22 : 17d.1.1 - INSERT quiz history สำหรับ Missing Words
         '-------------------------------------------
         QuizServ -> QuizRepo: insertQuizHistory_Missing(answersData, userID, quizID)
         activate QuizRepo
         QuizRepo -> DB: INSERT INTO Quiz_Histories (quiz_history_id, quiz_id, user_id, point, quiz_type, note, status) VALUES (<quiz_history_id>, <quiz_id>, <user_id>, <point>, 'missing', <note>, <status>);
         activate DB
         DB --> QuizRepo: success
         deactivate DB
         QuizRepo --> QuizServ: success (17d.1.1)

         '-------------------------------------------
         ' UC 22 : 17d.1.2 - INSERT missing words history สำหรับ Missing Words
         '-------------------------------------------
         QuizServ -> QuizRepo: insertMissingWordsHistory(answersData)
         activate QuizRepo
         QuizRepo -> DB: INSERT INTO Missing_Words_Histories (missing_word_history_id, quiz_history_id, answer, result) VALUES (<missing_word_history_id>, <quiz_history_id>, <answer>, <result>);
         activate DB
         DB --> QuizRepo: success
         deactivate DB
         QuizRepo --> QuizServ: success (17d.1.2)
    end

    alt บันทึกคำตอบสำเร็จ
         QuizServ --> QuizCtrl: success
         QuizCtrl --> Router: successResponse(200, "บันทึกคำตอบสำเร็จ")
         Router --> FE: successResponse(200, "บันทึกคำตอบสำเร็จ")
         FE -> User: แสดงข้อความ "บันทึกคำตอบสำเร็จ"
    else บันทึกคำตอบไม่สำเร็จ
         QuizServ -> QuizCtrl: returnError("ไม่สามารถบันทึกคำตอบได้")
         QuizCtrl -> Router: errorResponse(500, "ไม่สามารถบันทึกคำตอบได้")
         Router --> FE: errorResponse(500, "ไม่สามารถบันทึกคำตอบได้")
         FE -> User: แสดงข้อความ "ไม่สามารถบันทึกคำตอบได้"
    end
end
deactivate QuizServ
deactivate QuizCtrl
deactivate Router
@enduml
