@startuml
title Log-in with Google Account

actor User
participant Frontend
participant Router
participant Middleware
participant UserController
participant GoogleOAuthClient as GoogleOAuth
participant UserService
participant UserRepository
participant Database

activate Frontend
User -> Frontend: คลิก "Login"
Frontend -> User: แสดงตัวเลือกในการ Login
User -> Frontend: คลิก "Login with Google"
Frontend -> Router: GET /api/auth/google
activate Router

Router -> Middleware: ตรวจสอบ session (Cookie/JWT)
activate Middleware

alt ไม่มี session ที่ใช้งานอยู่
    Middleware -> GoogleOAuth: Redirect user ไปยัง Google OAuth URL\n(รวม state parameter)
    activate GoogleOAuth
    GoogleOAuth -> User: แสดงหน้า login ของ Google
    User -> GoogleOAuth: เลือกบัญชี Google และล็อกอิน
    GoogleOAuth -> Router: Redirect กลับมาพร้อม auth code และ state
    deactivate GoogleOAuth

    Router -> UserController: รับ auth code (callback)
    activate UserController
    UserController -> GoogleOAuth: POST /token\nส่ง auth code, client_id, secret, redirect_uri
    activate GoogleOAuth
    GoogleOAuth -> UserController: คืนค่า access token (และ id_token)
    deactivate GoogleOAuth

    UserController -> GoogleOAuth: GET /userinfo\nส่ง access token
    activate GoogleOAuth
    GoogleOAuth -> UserController: คืนค่า user profile (GoogleID, Email, Name)
    deactivate GoogleOAuth

    note right: ตรวจสอบ state parameter และจัดการ error (ไม่แสดงในที่นี้)

    UserController -> UserService: Validate/Create User (GoogleID, Email, Name)
    activate UserService
    UserService -> UserRepository: ค้นหาผู้ใช้ด้วย GoogleID
    activate UserRepository
    UserRepository -> Database: SELECT id, google_id, email, name FROM users WHERE google_id = ?
    activate Database
    Database -->> UserRepository: คืนค่า user record (ถ้ามี)
    deactivate Database

    alt ผู้ใช้มีอยู่แล้ว
        UserRepository -->> UserService: คืนข้อมูลผู้ใช้ที่มีอยู่
    else ผู้ใช้ใหม่
        UserRepository -> Database: INSERT INTO users (google_id, email, name) VALUES (?,?,?)
        activate Database
        Database -->> UserRepository: ยืนยันการ insert (เช่น affected rows)
        deactivate Database
        UserRepository -> UserService: ส่งผลลัพธ์การ insert (User Created)
    end
    deactivate UserRepository
    UserService -> UserController: คืนค่า User Data (UserID, GoogleID, Email, Name)
    deactivate UserService

    UserController -> Middleware: Generate Session Token สำหรับ UserID
    activate Middleware
    Middleware -> UserRepository: บันทึก session (ถ้าจำเป็น)
    activate UserRepository
    UserRepository -> Database: INSERT INTO sessions (user_id, token, expiry) VALUES (?,?,?)
    activate Database
    Database -->> UserRepository: ยืนยันการ insert (เช่น affected rows)
    deactivate Database
    UserRepository -> Middleware: ส่งผลลัพธ์การ insert (Session Created)
    deactivate UserRepository
    Middleware -> UserController: คืนค่า Session Token (หรือ set cookie)
    deactivate Middleware

    UserController -> Router: ส่ง session token และข้อมูลผู้ใช้
    deactivate UserController

else มี session อยู่แล้ว
    Middleware -> Router: ดำเนินการต่อด้วย session ที่มีอยู่
end

deactivate Middleware
deactivate Router

Router -> Frontend: 200 OK (Login successful, Set-Cookie header)
Frontend -> User: Redirect ไปยัง dashboard\n(ผ่าน client-side routing ของ Next.js)
deactivate Frontend

@enduml
