@startuml SequenceDiagram
title Analyze Log

actor User

activate Frontend

Frontend -> Router: GET /api/courses
activate Router

Router -> Middleware: .Use(Middleware)
activate Middleware

alt Unauthorized (401 Unauthorized)
    Middleware -->> Router: 401 Unauthorized
    Router -->> Frontend: 401 Unauthorized
    Frontend -->> User: Show error "Please log in"
else Authorized
    Middleware -->> Router: Proceed
    deactivate Middleware
    Router -> Controller: .GetAllCourses()
    activate Controller
    Controller -> Service: .GetAllCourses()
    activate Service
    Service -> Repository: .GetAllCourses()
    activate Repository
    Repository -> Database: SELECT * FROM courses WHERE owner_id = @user_id
    activate Database
    Database -->> Repository : Courses
    deactivate Database
    Repository -->> Service : Courses
    deactivate Repository
    Service -->> Controller : Courses
    deactivate Service
    alt Courses == Error
        Controller -->> Router : 500 Internal Server Error
        Router -->> Frontend : 500 Internal Server Error
        Frontend -->> User : Show error "Failed to fetch courses"
    else Courses == Null
        Controller -->> Router : 404 Not Found
        Router -->> Frontend : 404 Not Found
        Frontend -->> User : Show message "Course not found"
    else
        Controller -->> Router : 200 OK
        Router -->> Frontend : 200 OK
        Frontend -->> User : Show courses list
    end
    deactivate Controller

    opt User selects a course
        User -> Frontend: .handleCourseClick(courseId)
        Frontend -> Router: GET /api/courses/{courseId}
        activate Router
        Router -> Middleware: .Use(Middleware)
        activate Middleware
        alt Unauthorized (401 Unauthorized)
            Middleware -->> Router: 401 Unauthorized
            Router -->> Frontend: 401 Unauthorized
            Frontend -->> User: Show error "Please log in"
        else Authorized
            Middleware -->> Router: Proceed
            deactivate Middleware
            Router -> Controller: .GetLogs(courseId)
            activate Controller
            Controller -> Service: .GetLogs(courseId)
            activate Service
            Service -> Repository: .GetLogs(courseId)
            activate Repository
            Repository -> Database: SELECT * FROM logs WHERE course_id = @course_id
            activate Database
            Database -->> Repository : Logs
            deactivate Database
            Repository -->> Service : Logs
            deactivate Repository
            Service -->> Controller : Logs
            deactivate Service
            alt Logs == Error
                Controller -->> Router : 500 Internal Server Error
                Router -->> Frontend : 500 Internal Server Error
                Frontend -->> User : Show error "Failed to fetch logs"
            else Logs == Null
                Controller -->> Router : 404 Not Found
                Router -->> Frontend : 404 Not Found
                Frontend -->> User : Show message "No logs found"
            else
                Controller -->> Router : 200 OK
                Router -->> Frontend : 200 OK
                Frontend -->> User : Show logs list
            end
            deactivate Controller
        end
    end

    opt User selects calculation method
        User -> Frontend: .handleCalculationMethodSelect(method)
        Frontend -> Router: GET /api/statistics/{method}
        activate Router
        Router -> Middleware: .Use(Middleware)
        activate Middleware
        alt Unauthorized (401 Unauthorized)
            Middleware -->> Router: 401 Unauthorized
            Router -->> Frontend: 401 Unauthorized
            Frontend -->> User: Show error "Please log in"
        else Authorized
            Middleware -->> Router: Proceed
            deactivate Middleware
            Router -> Controller: .GetStatistics(courseId, method)
            activate Controller
            Controller -> Service: .GetStatistics(courseId, method)
            activate Service
            Service -> Repository: .GetStatistics(courseId, method)
            activate Repository
            Repository -> Database: SELECT * FROM statistics WHERE course_id = @course_id AND method = @method
            activate Database
            Database -->> Repository : Statistics
            deactivate Database
            Repository -->> Service : Statistics
            deactivate Repository
            Service -->> Controller : Statistics
            deactivate Service
            alt Statistics == Error
                Controller -->> Router : 500 Internal Server Error
                Router -->> Frontend : 500 Internal Server Error
                Frontend -->> User : Show error "Failed to calculate statistics"
            else Statistics == Null
                Controller -->> Router : 404 Not Found
                Router -->> Frontend : 404 Not Found
                Frontend -->> User : Show message "No statistics found"
            else
                Controller -->> Router : 200 OK
                Router -->> Frontend : 200 OK
                Frontend -->> User : Show statistics
            end
            deactivate Controller
        end
    end
end

@enduml
