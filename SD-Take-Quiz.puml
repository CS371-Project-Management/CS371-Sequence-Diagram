@startuml
title Take Quiz

actor "ผู้ใช้" as User
participant "Frontend" as FE
participant "Router" as Router
participant "Middleware" as MW

' --- Class Module ---
participant "Class Controller" as ClassCtrl
participant "Class Service" as ClassServ
participant "Class Repository" as ClassRepo

' --- Course Module ---
participant "Course Controller" as CourseCtrl
participant "Course Service" as CourseServ
participant "Course Repository" as CourseRepo

' --- Quiz Module ---
participant "Quiz Controller" as QuizCtrl
participant "Quiz Service" as QuizServ
participant "Quiz Repository" as QuizRepo

participant "Database" as DB

'============== Phase 1: ดึงข้อมูล Class ที่ผู้ใช้เข้าร่วม ==============
FE -> Router: GET /api/classes?joined=true
activate Router
Router -> MW: validateSession()
activate MW
MW -> ClassCtrl: getJoinedClasses(userID)
deactivate MW
activate ClassCtrl
ClassCtrl -> ClassServ: getJoinedClasses(userID)
activate ClassServ
ClassServ -> ClassRepo: selectJoinedClasses(userID)
activate ClassRepo
ClassRepo -> DB: SELECT id, name, description FROM classes WHERE user_id = ?
activate DB
DB --> ClassRepo: [classList]
deactivate DB
alt ไม่พบข้อมูล class
    ClassRepo --> ClassServ: []
    ClassServ -> ClassCtrl: returnError("ไม่พบข้อมูล class")
    ClassCtrl -> Router: errorResponse(404, "ไม่พบข้อมูล class")
    Router --> FE: errorResponse(404, "ไม่พบข้อมูล class")
    FE -> User: แสดงข้อความ "ไม่พบข้อมูล class"
else พบข้อมูล class
    ClassRepo --> ClassServ: [classList]
    ClassServ --> ClassCtrl: [classList]
    ClassCtrl --> Router: successResponse(200, classList)
    Router --> FE: successResponse(200, classList)
    FE -> User: แสดงรายการ class

    '============== Phase 2: ดึงข้อมูล Course ภายใน Class ที่เลือก ==============
    User -> FE: เลือก class ที่ต้องการ
    FE -> Router: GET /api/courses?classID={classID}
    activate Router
    Router -> MW: validateRequest()
    activate MW
    MW -> CourseCtrl: getCourses(classID)
    deactivate MW
    activate CourseCtrl
    CourseCtrl -> CourseServ: getCourses(classID)
    activate CourseServ
    CourseServ -> CourseRepo: selectCoursesByClass(classID)
    activate CourseRepo
    CourseRepo -> DB: SELECT id, title, description FROM courses WHERE class_id = ?
    activate DB
    DB --> CourseRepo: [courseList]
    deactivate DB
    alt ไม่พบข้อมูล course
         CourseRepo --> CourseServ: []
         CourseServ -> CourseCtrl: returnError("ไม่พบข้อมูล course")
         CourseCtrl -> Router: errorResponse(404, "ไม่พบข้อมูล course")
         Router --> FE: errorResponse(404, "ไม่พบข้อมูล course")
         FE -> User: แสดงข้อความ "ไม่พบข้อมูล course"
    else พบข้อมูล course
         CourseRepo --> CourseServ: [courseList]
         CourseServ --> CourseCtrl: [courseList]
         CourseCtrl --> Router: successResponse(200, courseList)
         Router --> FE: successResponse(200, courseList)
         FE -> User: แสดงรายการ course

         '============== Phase 3: ดึงข้อมูล Quiz ภายใน Course ที่เลือก ==============
         User -> FE: เลือก course ที่ต้องการ
         FE -> Router: GET /api/quizzes?courseID={courseID}
         activate Router
         Router -> MW: validateRequest()
         activate MW
         MW -> QuizCtrl: getQuizzes(courseID)
         deactivate MW
         activate QuizCtrl
         QuizCtrl -> QuizServ: getQuizzes(courseID)
         activate QuizServ
         QuizServ -> QuizRepo: selectQuizzesByCourse(courseID)
         activate QuizRepo
         QuizRepo -> DB: SELECT id, title, type FROM quizzes WHERE course_id = ?
         activate DB
         DB --> QuizRepo: [quizBaseList]
         deactivate DB
         QuizRepo -> DB: SELECT quiz_id, some_field FROM choice_quizzes WHERE course_id = ?
         activate DB
         DB --> QuizRepo: [choiceQuizzes]
         deactivate DB
         QuizRepo -> DB: SELECT choice_quiz_id, answer_text FROM choice_answers WHERE course_id = ?
         activate DB
         DB --> QuizRepo: [choiceAnswers]
         deactivate DB
         QuizRepo -> DB: SELECT quiz_id, some_field FROM ordering_quizzes WHERE course_id = ?
         activate DB
         DB --> QuizRepo: [orderingQuizzes]
         deactivate DB
         QuizRepo -> DB: SELECT ordering_quiz_id, answer_sequence FROM ordering_answers WHERE course_id = ?
         activate DB
         DB --> QuizRepo: [orderingAnswers]
         deactivate DB
         QuizRepo -> DB: SELECT quiz_id, some_field FROM missing_words_quizzes WHERE course_id = ?
         activate DB
         DB --> QuizRepo: [missingWordsQuizzes]
         deactivate DB
         QuizRepo --> QuizServ: [quizBaseList, choiceQuizzes, choiceAnswers, orderingQuizzes, orderingAnswers, missingWordsQuizzes]
         deactivate QuizRepo
         QuizServ --> QuizCtrl: [quizList]
         deactivate QuizServ
         QuizCtrl --> Router: successResponse(200, quizList)
         Router --> FE: successResponse(200, quizList)
         FE -> User: แสดงรายการ quiz
         deactivate QuizCtrl
         deactivate Router

         '============== Phase 4: ดึงข้อมูลประวัติการทำ Quiz ==============
         User -> FE: เลือก quiz ที่ต้องการ
         FE -> Router: GET /api/quizHistory?quizID={quizID}
         activate Router
         Router -> MW: validateRequest()
         activate MW
         MW -> QuizCtrl: getQuizHistory(quizID, userID)
         deactivate MW
         activate QuizCtrl
         QuizCtrl -> QuizServ: getQuizHistory(quizID, userID)
         activate QuizServ
         QuizServ -> QuizRepo: selectQuizHistory(quizID, userID)
         activate QuizRepo
         QuizRepo -> DB: SELECT id, user_id, quiz_id, note FROM quiz_histories WHERE quiz_id = ? AND user_id = ?
         activate DB
         DB --> QuizRepo: [quizHistories]
         deactivate DB
         QuizRepo -> DB: SELECT history_id, selected_choice FROM choice_histories WHERE quiz_id = ? AND user_id = ?
         activate DB
         DB --> QuizRepo: [choiceHistories]
         deactivate DB
         QuizRepo -> DB: SELECT history_id, answer_sequence FROM ordering_histories WHERE quiz_id = ? AND user_id = ?
         activate DB
         DB --> QuizRepo: [orderingHistories]
         deactivate DB
         QuizRepo -> DB: SELECT history_id, missing_word FROM missing_words_histories WHERE quiz_id = ? AND user_id = ?
         activate DB
         DB --> QuizRepo: [missingWordsHistories]
         deactivate DB
         QuizRepo --> QuizServ: [quizHistories, choiceHistories, orderingHistories, missingWordsHistories]
         deactivate QuizRepo
         QuizServ --> QuizCtrl: [quizHistory]
         alt ไม่พบประวัติ
              QuizCtrl -> Router: successResponse(200, "noHistory")
              Router --> FE: successResponse(200, "noHistory")
              FE -> User: แสดง quiz โดยไม่มีประวัติ
         else พบประวัติ
              QuizCtrl -> Router: successResponse(200, quizHistory)
              Router --> FE: successResponse(200, quizHistory)
              FE -> User: แสดง quiz พร้อมประวัติ
         end
         deactivate QuizCtrl
         deactivate Router

         '============== Phase 5: ผู้ใช้ทำ Quiz และส่งคำตอบ ==============
         User -> FE: ทำแบบทดสอบและกด "บันทึกคำตอบ"
         FE -> Router: POST /api/quizAnswers
         activate Router
         Router -> MW: validateRequest()
         activate MW
         MW -> QuizCtrl: saveQuizAnswers(answersData, userID, quizID)
         deactivate MW
         activate QuizCtrl
         QuizCtrl -> QuizServ: saveQuizAnswers(answersData, userID, quizID)
         activate QuizServ
         alt ข้อมูลไม่ครบถ้วน
                           QuizServ -> QuizCtrl: returnError("ข้อมูลไม่ครบถ้วน")
                           QuizCtrl -> Router: errorResponse(400, "ข้อมูลไม่ครบถ้วน")
                           Router --> FE: errorResponse(400, "ข้อมูลไม่ครบถ้วน")
                           FE -> User: แสดงข้อความ "ข้อมูลไม่ครบถ้วน"


         else ข้อมูลที่ส่งมาครบถ้วน
              QuizServ -> QuizRepo: insertQuizHistory(...)
              activate QuizRepo
              QuizRepo -> DB: INSERT INTO quiz_histories (id, user_id, quiz_id, note) VALUES (?,?,?,?)
              activate DB
              DB --> QuizRepo: success
              deactivate DB
              QuizRepo -> DB: INSERT INTO choice_histories (history_id, selected_choice) VALUES (?,?)
              activate DB
              DB --> QuizRepo: success
              deactivate DB
              QuizRepo -> DB: INSERT INTO ordering_histories (history_id, answer_sequence) VALUES (?,?)
              activate DB
              DB --> QuizRepo: success
              deactivate DB
              QuizRepo -> DB: INSERT INTO missing_words_histories (history_id, missing_word) VALUES (?,?)
              activate DB
              DB --> QuizRepo: success
              QuizRepo -> QuizServ:INSERT result
              deactivate DB
              deactivate QuizRepo
              alt บันทึกคำตอบสำเร็จ
                   QuizServ --> QuizCtrl: success
                   QuizCtrl --> Router: successResponse(200, "บันทึกคำตอบสำเร็จ")
                   Router --> FE: successResponse(200, "บันทึกคำตอบสำเร็จ")
                   FE -> User: แสดงข้อความ "บันทึกคำตอบสำเร็จ"
              else บันทึกคำตอบไม่สำเร็จ
                   QuizServ -> QuizCtrl: returnError("ไม่สามารถบันทึกคำตอบได้")
                   QuizCtrl -> Router: errorResponse(500, "บันทึกคำตอบไม่สำเร็จ")
                   Router --> FE: errorResponse(500, "บันทึกคำตอบไม่สำเร็จ")
                   FE -> User: แสดงข้อความ "บันทึกคำตอบไม่สำเร็จ"
              end

         end
         deactivate QuizServ
         deactivate QuizCtrl
         deactivate Router
    end
    end
@enduml
