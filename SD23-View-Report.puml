@startuml
title View Report

actor "ผู้ใช้" as User
participant "Frontend" as FE
participant "Router" as Router
participant "Middleware" as MW

' --- Class Module ---
participant "Class Controller" as ClassCtrl
participant "Class Service" as ClassServ
participant "Class Repository" as ClassRepo

' --- Course Module ---
participant "Course Controller" as CourseCtrl
participant "Course Service" as CourseServ
participant "Course Repository" as CourseRepo

participant "Database" as DB

'================= Phase 1: ดึงข้อมูล Class ที่ผู้ใช้เข้าร่วม =================
FE -> Router: GET /api/classes?joined=true
activate Router
Router -> MW: validateSession()
activate MW
MW -> ClassCtrl: getJoinedClasses(userID)
deactivate MW
activate ClassCtrl
ClassCtrl -> ClassServ: getJoinedClasses(userID)
activate ClassServ
ClassServ -> ClassRepo: selectJoinedClasses(userID)
activate ClassRepo
ClassRepo -> DB: SELECT id, name, description FROM classes WHERE user_id = ?
activate DB
DB --> ClassRepo: [classList]
deactivate DB

alt ไม่พบข้อมูล class
   ClassRepo --> ClassServ: []
       ClassServ -> ClassCtrl: returnError("ไม่พบข้อมูล class")
       ClassCtrl -> Router: errorResponse(404, "ไม่พบข้อมูล class")
       Router --> FE: errorResponse(404, "ไม่พบข้อมูล class")
       FE -> User: แสดงข้อความ "ไม่พบข้อมูล class"
else พบข้อมูล class
    ClassRepo --> ClassServ: [classList]
    deactivate ClassRepo
        ClassServ --> ClassCtrl: [classList]
        ClassCtrl --> Router: successResponse(200, classList)
        deactivate ClassServ
        Router --> FE: successResponse(200, classList)
        FE -> User: แสดงรายการ class
deactivate ClassCtrl
deactivate Router

'================= Phase 2: ดึงข้อมูล Course ภายใน Class ที่เลือก =================
User -> FE: เลือก class ที่ต้องการ
FE -> Router: GET /api/courses?classID={classID}
activate Router
Router -> MW: validateRequest()
activate MW
MW -> CourseCtrl: getCourses(classID)
deactivate MW
activate CourseCtrl
CourseCtrl -> CourseServ: getCourses(classID)
activate CourseServ
CourseServ -> CourseRepo: selectCoursesByClass(classID)
activate CourseRepo
CourseRepo -> DB: SELECT id, title, description FROM courses WHERE class_id = ?
activate DB
DB --> CourseRepo: [courseList]
deactivate DB
alt ไม่พบข้อมูล course
    CourseRepo --> CourseServ: []
        CourseServ -> CourseCtrl: returnError("ไม่พบข้อมูล course")
        CourseCtrl -> Router: errorResponse(404, "ไม่พบข้อมูล course")
        Router --> FE: errorResponse(404, "ไม่พบข้อมูล course")
        FE -> User: แสดงข้อความ "ไม่พบข้อมูล course"
else พบข้อมูล course
CourseRepo --> CourseServ: [courseList]
    CourseServ --> CourseCtrl: [courseList]
    deactivate ClassCtrl
    CourseCtrl --> Router: successResponse(200, courseList)
    Router --> FE: successResponse(200, courseList)
    FE -> User: แสดงรายการ course

deactivate CourseCtrl
deactivate Router

'================= Phase 3: ยืนยันส่งคำตอบ =================
User -> FE: กดปุ่มยืนยันการส่งคำตอบ
FE -> User: ยืนยันการส่งคำตอบเรียบร้อย

'================= Phase 4: ดูผลการทำแบบทดสอบ (View Report) =================
User -> FE: กดปุ่ม "ดูผลการทำแบบทดสอบ"
FE -> Router: GET /api/quizReport?courseID={courseID}
activate Router
Router -> MW: validateRequest()
activate MW
MW -> CourseCtrl: getQuizReport(courseID, userID)
deactivate MW
activate CourseCtrl
CourseCtrl -> CourseServ: getQuizReport(courseID, userID)
activate CourseServ
CourseServ -> CourseRepo: selectQuizReportData(courseID, userID)
CourseRepo -> DB: SELECT id, title, type FROM quizzes WHERE course_id = ?
activate DB
DB --> CourseRepo: [quizList]
deactivate DB
CourseRepo -> DB: SELECT id FROM quiz_histories WHERE course_id = ? AND user_id = ?
activate DB
DB --> CourseRepo: [quizHistories]
deactivate DB
CourseRepo -> DB: SELECT id FROM choice_histories WHERE course_id = ? AND user_id = ?
activate DB
DB --> CourseRepo: [choiceHistories]
deactivate DB
CourseRepo -> DB: SELECT id FROM ordering_histories WHERE course_id = ? AND user_id = ?
activate DB
DB --> CourseRepo: [orderingHistories]
deactivate DB
CourseRepo -> DB: SELECT id FROM missing_words_histories WHERE course_id = ? AND user_id = ?
activate DB
DB --> CourseRepo: [missingWordsHistories]
deactivate DB
CourseRepo --> CourseServ: [quizReportData]
deactivate CourseRepo
deactivate CourseRepo

CourseServ -> CourseServ: check completeness of quiz histories
alt ประวัติไม่ครบ
    CourseServ --> CourseCtrl: returnError("ต้องทำแบบทดสอบให้ครบทุกข้อก่อนส่งคำตอบ")
    CourseCtrl --> Router: errorResponse(400, "ต้องทำแบบทดสอบให้ครบทุกข้อก่อนส่งคำตอบ")
    Router --> FE: errorResponse(400, "ต้องทำแบบทดสอบให้ครบทุกข้อก่อนส่งคำตอบ")
    FE -> User: แสดงข้อความ "ต้องทำแบบทดสอบให้ครบทุกข้อก่อนส่งคำตอบ"
else
    CourseServ -> CourseServ: calculate report result
    alt คำนวณผลสำเร็จ
         CourseServ --> CourseCtrl: reportResult
         CourseCtrl --> Router: successResponse(200, reportResult)
         Router --> FE: successResponse(200, reportResult)
         FE -> User: แสดงผลคะแนนและรายงานผลแบบทดสอบ
    else คำนวณผลไม่สำเร็จ
         CourseServ --> CourseCtrl: returnError("เกิดข้อผิดพลาดในการคำนวณ")
         CourseCtrl --> Router: errorResponse(500, "เกิดข้อผิดพลาดในการคำนวณ")
         deactivate CourseCtrl
         Router --> FE: errorResponse(500, "เกิดข้อผิดพลาดในการคำนวณ")
         deactivate Router
         FE -> User: แสดงข้อความ "เกิดข้อผิดพลาดในการคำนวณ"
    end
end
end
deactivate CourseServ
deactivate CourseCtrl
@enduml