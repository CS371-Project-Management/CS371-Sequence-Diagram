@startuml SequenceDiagram
title Join Public Class

actor User

participant ": Frontend" as Frontend
participant ": Router" as Router
participant ": Middleware" as Middleware

participant ": ClassController" as ClassController
participant ": ClassService" as ClassService
participant ": ClassRepository" as ClassRepository

participant ": EnrollmentController" as EnrollmentController
participant ": EnrollmentService" as EnrollmentService
participant ": EnrollmentRepository" as EnrollmentRepository
participant ": CourseRepository" as CourseRepository

database Database

activate Frontend #LightBlue

Frontend -> Router: GET /api/classes/public?user-id={userId}
activate Router #LightGreen

Router -> Middleware: .Use(Middleware)
activate Middleware #LightPink
Middleware -> Middleware : .Verify()

alt Unauthorized (401 Unauthorized)
  Middleware --> Router: 401 Unauthorized
  deactivate Middleware
  Router --> Frontend: 401 Unauthorized
  deactivate Router
  Frontend --> User: Show error "Please log in"
else Authorized
  Middleware --> Router: Route to Router
  deactivate Middleware
  Router -> ClassController: .GetPublicClasses(userId)
  activate ClassController #LightBlue

  ClassController -> ClassService: .GetPublicClasses(userId)
  activate ClassService #LightGreen
  ClassService -> ClassRepository: .GetPublicClasses(userId)
  activate ClassRepository #LightPink
  ClassRepository -> Database: SELECT c.class_id, c.title, c.description \nFROM Classes c \nLEFT JOIN User_Classes uc ON c.class_id = uc.class_id AND uc.user_id = @userId \nWHERE uc.class_id IS NULL AND c.accessibility = 'public'
  activate Database #LightGray
  Database --> ClassRepository: Classes
  deactivate Database
  ClassRepository --> ClassService: Classes
  deactivate ClassRepository
  ClassService --> ClassController: Classes
  deactivate ClassService

  alt Classes empty
    ClassController --> Router: 204 No Content
    deactivate ClassController
    Router --> Frontend: 204 No Content
    deactivate Router
    Frontend --> User: Show message "No public classes available"
  else Error
    ClassController --> Router: 500 Internal Server Error
    deactivate ClassController
    Router --> Frontend: 500 Internal Server Error
    deactivate Router
    Frontend --> User: Show error "Failed to load classes"
  else
    ClassController --> Router: 200 OK
    deactivate ClassController
    Router --> Frontend: 200 OK
    deactivate Router
    Frontend --> User: Show public classes list
  end
end

opt User selects class to join
  User -> Frontend: .handleJoinClass(classId)
  Frontend -> Router: POST /api/enrollments {userId, classId}
  activate Router #LightGreen

  Router -> Middleware: .Use(Middleware)
  activate Middleware #LightPink
  Middleware -> Middleware : .Verify()

  alt Unauthorized
    Middleware --> Router: 401 Unauthorized
    deactivate Middleware
    Router --> Frontend: 401 Unauthorized
    deactivate Router
    Frontend --> User: Show error "Please log in"
  else Authorized
    Middleware --> Router: Route to Router
    deactivate Middleware
    Router -> EnrollmentController: .EnrollUser(userId, classId)
    activate EnrollmentController #LightBlue

    EnrollmentController -> EnrollmentService: .EnrollUser(userId, classId)
    activate EnrollmentService #LightGreen

    ' Step 1: Create enrollment in User_Classes
    EnrollmentService -> EnrollmentRepository: .CreateEnrollment(userId, classId)
    activate EnrollmentRepository #LightPink
    EnrollmentRepository -> Database: INSERT INTO User_Classes (user_id, class_id) \nVALUES (@userId, @classId)
    activate Database #LightGray
    Database --> EnrollmentRepository: enrollmentId
    deactivate Database
    EnrollmentRepository --> EnrollmentService: enrollmentId
    deactivate EnrollmentRepository

    ' Step 2: Get courses for this class
    EnrollmentService -> CourseRepository: .GetCoursesByClass(classId)
    activate CourseRepository #LightPink
    CourseRepository -> Database: SELECT course_id FROM Courses WHERE class_id = @classId
    activate Database #LightGray
    Database --> CourseRepository: courses
    deactivate Database
    CourseRepository --> EnrollmentService: courses
    deactivate CourseRepository

    ' Step 3: Enroll in all courses
    loop for each course
      EnrollmentService -> EnrollmentRepository: .EnrollInCourse(userId, course.course_id)
      activate EnrollmentRepository #LightPink
      EnrollmentRepository -> Database: INSERT INTO User_Courses (user_id, course_id, status) \nVALUES (@userId, @courseId, 'active')
      activate Database #LightGray
      Database --> EnrollmentRepository: success
      deactivate Database
      EnrollmentRepository --> EnrollmentService: success
      deactivate EnrollmentRepository
    end

    EnrollmentService --> EnrollmentController: EnrollmentResult
    deactivate EnrollmentService

    alt Enrollment failed
      EnrollmentController --> Router: 500 Internal Server Error
      deactivate EnrollmentController
      Router --> Frontend: 500 Internal Server Error
      deactivate Router
      Frontend --> User: Show error "Failed to join class"
    else
      EnrollmentController --> Router: 201 Created
      deactivate EnrollmentController
      Router --> Frontend: 201 Created
      deactivate Router
      Frontend --> User: Show success "Successfully joined class"
    end
  end
end

deactivate Frontend
@enduml