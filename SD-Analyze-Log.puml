@startuml SequenceDiagram
title Analyze Log

actor User
participant ": Frontend" as Frontend
participant ": Router" as Router
participant ": Middleware" as Middleware

participant ": ClassController" as ClassController
participant ": ClassService" as ClassService
participant ": ClassRepository" as ClassRepository

participant ": CourseController" as CourseController
participant ": CourseService" as CourseService
participant ": CourseRepository" as CourseRepository

participant ": LogController" as LogController
participant ": LogService" as LogService
participant ": LogRepository" as LogRepository

database Database

activate Frontend

Frontend -> Router: GET /api/classes
activate Router

Router -> Middleware: .Use(Middleware)
activate Middleware
Middleware -> Middleware : .Verify()
alt Unauthorized (401 Unauthorized)
  Middleware -->> Router: 401 Unauthorized
  Router -->> Frontend: 401 Unauthorized
  Frontend -->> User: Show error "Please log in"
else Authorized
  Middleware -->> Router: Route to Router
  deactivate Middleware
  Router -> ClassController: .GetAllClasses()
  activate ClassController
  ClassController -> ClassService: .GetAllClasses()
  activate ClassService
  ClassService -> ClassRepository: .GetAllClasses()
  activate ClassRepository
  ClassRepository -> Database: SELECT class_id, user_id, invite_code, title, description, accessibility FROM Classes WHERE user_id = <user_id>;
  activate Database
  Database -->> ClassRepository : Classes, Error
  deactivate Database
  ClassRepository -->> ClassService : Classes, Error
  deactivate ClassRepository
  ClassService -->> ClassController : Classes, Error
  deactivate ClassService
  alt Error != Null
    ClassController -->> Router : 500 Internal Server Error
    Router -->> Frontend : 500 Internal Server Error
    Frontend -->> User : Show error "Failed to fetch classes"
  else Classes == Null
    ClassController -->> Router : 404 Not Found
    Router -->> Frontend : 404 Not Found
    Frontend -->> User : Show message "Class not found"
  else
    ClassController -->> Router : 200 OK
    Router -->> Frontend : 200 OK
    Frontend -->> User : Show classes list
  end
  deactivate ClassController
  deactivate Router

  opt User selects a class
    User -> Frontend: .handleClassClick(classId)
    Frontend -> Router: GET /api/courses/{classId}
    activate Router

    Router -> Middleware: .Use(Middleware)
    activate Middleware
    Middleware -> Middleware : .Verify()
    alt Unauthorized (401 Unauthorized)
      Middleware -->> Router: 401 Unauthorized
      Router -->> Frontend: 401 Unauthorized
      Frontend -->> User: Show error "Please log in"
    else Authorized
      Middleware -->> Router: Route to Router
      deactivate Middleware
      Router -> CourseController: .GetAllCourses(classId)
      activate CourseController
      CourseController -> CourseService: .GetAllCourses(classId)
      activate CourseService
      CourseService -> CourseRepository: .GetAllCourses(classId)
      activate CourseRepository
      CourseRepository -> Database: SELECT * FROM courses WHERE class_id = @class_id
      activate Database
      Database -->> CourseRepository : Courses, Error
      deactivate Database
      CourseRepository -->> CourseService : Courses, Error
      deactivate CourseRepository
      CourseService -->> CourseController : Courses, Error
      deactivate CourseService
      alt Error != Null
        CourseController -->> Router : 500 Internal Server Error
        Router -->> Frontend : 500 Internal Server Error
        Frontend -->> User : Show error "Failed to fetch courses"
      else Courses == Null
        CourseController -->> Router : 404 Not Found
        Router -->> Frontend : 404 Not Found
        Frontend -->> User : Show message "Course not found"
      else
        CourseController -->> Router : 200 OK
        Router -->> Frontend : 200 OK
        Frontend -->> User : Show courses list
      end
      deactivate CourseController
      deactivate Router

      opt User selects a course
        User -> Frontend: .handleCourseClick(courseId)
        Frontend -->> User: Show Log-Type menu

        User -> Frontend: .handleLogClick(courseId, logType)
        Frontend -> Router: GET /api/logs/{courseId}
        activate Router

        Router -> Middleware: .Use(Middleware)
        activate Middleware
        Middleware -> Middleware : .Verify()
        alt Unauthorized (401 Unauthorized)
          Middleware -->> Router: 401 Unauthorized
          Router -->> Frontend: 401 Unauthorized
          Frontend -->> User: Show error "Please log in"
        else Authorized
          Middleware -->> Router: Route to Router
          deactivate Middleware
          Router -> LogController: .GetAllLogs(courseId,logType)
          activate LogController
          LogController -> LogService: .GetAllLogs(courseId,logType)
          activate LogService
          LogService -> LogRepository: .GetAllLogs(courseId,logType)
          activate LogRepository
          activate Database
          LogRepository -> Database: SELECT * FROM quizzes WHERE course_id = @course_id
          Database -->> LogRepository : quizzes, Error
          LogRepository -> Database: SELECT * FROM choice_quizzes WHERE course_id = @course_id
          Database -->> LogRepository : choice_quizzes, Error
          LogRepository -> Database: SELECT * FROM choice_answers WHERE course_id = @course_id
          Database -->> LogRepository : choice_answers, Error
          LogRepository -> Database: SELECT * FROM ordering_quizzes WHERE course_id = @course_id
          Database -->> LogRepository : ordering_quizzes, Error
          LogRepository -> Database: SELECT * FROM ordering_answers WHERE course_id = @course_id
          Database -->> LogRepository : ordering_answers, Error
          LogRepository -> Database: SELECT * FROM missing_word_quizzes WHERE course_id = @course_id
          Database -->> LogRepository : missing_word_quizzes, Error
          LogRepository -> Database: SELECT * FROM quiz_histories WHERE course_id = @course_id
          Database -->> LogRepository : quiz_histories, Error
          LogRepository -> Database: SELECT * FROM choice_histories WHERE course_id = @course_id
          Database -->> LogRepository : choice_histories, Error
          LogRepository -> Database: SELECT * FROM ordering_histories WHERE course_id = @course_id
          Database -->> LogRepository : ordering_histories, Error
          LogRepository -> Database: SELECT * FROM missing_word_histories WHERE course_id = @course_id
          Database -->> LogRepository : missing_word_histories, Error
          deactivate Database
          LogRepository -->> LogService : Logs, Error
          deactivate LogRepository
          alt Error != Null
            LogService -->> LogController : Logs, Error
            LogController -->> Router : 500 Internal Server Error
            Router -->> Frontend : 500 Internal Server Error
            Frontend -->> User : Show error "Failed to fetch logs"
          else Logs == Null
            LogService -->> LogController : Logs, Error
            LogController -->> Router : 404 Not Found
            Router -->> Frontend : 404 Not Found
            Frontend -->> User : Show message "Log not found"
          else
            LogService -> LogService : Calculate statistics
            LogService -->> LogController : Logs
            LogController -->> Router : 200 OK
            Router -->> Frontend : 200 OK
            Frontend -->> User : Show logs list
          end
          deactivate LogService
        end
      end
    end
  end
end
@enduml
