@startuml SequenceDiagram
title Analyze Log

actor User
participant Frontend
participant Router
participant Middleware
participant Controller
participant Service
participant Repository
participant Database

activate Frontend

Frontend -> Router: GET /api/classes
activate Router

Router -> Middleware: .Use(Middleware)
activate Middleware
Middleware -> Service: .GetSessionToken()
activate Service
Service -> Repository: .GetSessionToken()
activate Repository
Repository -> Database: SELECT session_token FROM sessions WHERE user_id = @user_id
activate Database
Database -->> Repository: SessionToken
deactivate Database
Repository -->> Service: SessionToken
deactivate Repository
Service -->> Middleware: SessionToken
deactivate Service
alt Unauthorized (401 Unauthorized)
  Middleware -->> Router: 401 Unauthorized
  Router -->> Frontend: 401 Unauthorized
  Frontend -->> User: Show error "Please log in"
else Authorized
  Middleware -->> Router: Route to Router
  deactivate Middleware
  Router -> Controller: .GetAllClasses()
  activate Controller
  Controller -> Service: .GetAllClasses()
  activate Service
  Service -> Repository: .GetAllClasses()
  activate Repository
  Repository -> Database: SELECT * FROM classes WHERE owner_id = @user_id
  activate Database
  Database -->> Repository : Classes, Error
  deactivate Database
  Repository -->> Service : Classes, Error
  deactivate Repository
  Service -->> Controller : Classes, Error
  deactivate Service
  alt Error != Null
    Controller -->> Router : 500 Internal Server Error
    Router -->> Frontend : 500 Internal Server Error
    Frontend -->> User : Show error "Failed to fetch classes"
  else Classes == Null
    Controller -->> Router : 404 Not Found
    Router -->> Frontend : 404 Not Found
    Frontend -->> User : Show message "Class not found"
  else
    Controller -->> Router : 200 OK
    Router -->> Frontend : 200 OK
    Frontend -->> User : Show classes list
  end
  deactivate Controller
  deactivate Router

  opt User selects a class
    User -> Frontend: .handleClassClick(classId)
    Frontend -> Router: GET /api/courses/{classId}
    activate Router

    Router -> Middleware: .Use(Middleware)
    activate Middleware
    Middleware -> Service: .GetSessionToken()
    activate Service
    Service -> Repository: .GetSessionToken()
    activate Repository
    Repository -> Database: SELECT session_token FROM sessions WHERE user_id = @user_id
    activate Database
    Database -->> Repository: SessionToken
    deactivate Database
    Repository -->> Service: SessionToken
    deactivate Repository
    Service -->> Middleware: SessionToken
    deactivate Service
    alt Unauthorized (401 Unauthorized)
      Middleware -->> Router: 401 Unauthorized
      Router -->> Frontend: 401 Unauthorized
      Frontend -->> User: Show error "Please log in"
    else Authorized
      Middleware -->> Router: Route to Router
      deactivate Middleware
      Router -> Controller: .GetAllCourses(classId)
      activate Controller
      Controller -> Service: .GetAllCourses(classId)
      activate Service
      Service -> Repository: .GetAllCourses(classId)
      activate Repository
      Repository -> Database: SELECT * FROM courses WHERE class_id = @class_id
      activate Database
      Database -->> Repository : Courses, Error
      deactivate Database
      Repository -->> Service : Courses, Error
      deactivate Repository
      Service -->> Controller : Courses, Error
      deactivate Service
      alt Error != Null
        Controller -->> Router : 500 Internal Server Error
        Router -->> Frontend : 500 Internal Server Error
        Frontend -->> User : Show error "Failed to fetch courses"
      else Courses == Null
        Controller -->> Router : 404 Not Found
        Router -->> Frontend : 404 Not Found
        Frontend -->> User : Show message "Course not found"
      else
        Controller -->> Router : 200 OK
        Router -->> Frontend : 200 OK
        Frontend -->> User : Show courses list
      end
      deactivate Controller
      deactivate Router

      opt User selects a course
        User -> Frontend: .handleCourseClick(courseId)
        Frontend -->> User: Show Log-Type menu

        User -> Frontend: .handleLogClick(courseId, logType)
        Frontend -> Router: GET /api/logs/{courseId}
        activate Router

        Router -> Middleware: .Use(Middleware)
        activate Middleware
        Middleware -> Service: .GetSessionToken()
        activate Service
        Service -> Repository: .GetSessionToken()
        activate Repository
        Repository -> Database: SELECT session_token FROM sessions WHERE user_id = @user_id
        activate Database
        Database -->> Repository: SessionToken
        deactivate Database
        Repository -->> Service: SessionToken
        deactivate Repository
        Service -->> Middleware: SessionToken
        deactivate Service
        alt Unauthorized (401 Unauthorized)
          Middleware -->> Router: 401 Unauthorized
          Router -->> Frontend: 401 Unauthorized
          Frontend -->> User: Show error "Please log idn"
        else Authorized
          Middleware -->> Router: Route to Router
          deactivate Middleware
          Router -> Controller: .GetAllLogs(courseId,logType)
          activate Controller
          Controller -> Service: .GetAllLogs(courseId,logType)
          activate Service
          Service -> Repository: .GetAllLogs(courseId,logType)
          activate Repository
          Repository -> Database: SELECT * FROM logs WHERE course_id = @course_id AND type = @log_type
          activate Database
          Database -->> Repository : Logs, Error
          deactivate Database
          Repository -->> Service : Logs, Error
          deactivate Repository
          Service -->> Controller : Logs, Error
          deactivate Service
          alt Error != Null
            Controller -->> Router : 500 Internal Server Error
            Router -->> Frontend : 500 Internal Server Error
            Frontend -->> User : Show error "Failed to fetch logs"
          else Logs == Null
            Controller -->> Router : 404 Not Found
            Router -->> Frontend : 404 Not Found
            Frontend -->> User : Show message "Log not found"
          else
            Controller -> Controller : Calculate statistics
            Controller -->> Router : 200 OK
            Router -->> Frontend : 200 OK
            Frontend -->> User : Show logs list
          end
        end
      end
    end
  end
end
@enduml
