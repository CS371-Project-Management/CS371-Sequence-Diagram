@startuml SequenceDiagram
title Create Quiz

actor User
participant ": Frontend" as Frontend
participant ": Router" as Router
participant ": Middleware" as Middleware

participant ": ClassController" as ClassController
participant ": ClassService" as ClassService
participant ": ClassRepository" as ClassRepository

participant ": CourseController" as CourseController
participant ": CourseService" as CourseService
participant ": CourseRepository" as CourseRepository

participant ": QuizController" as QuizController
participant ": QuizService" as QuizService
participant ": ChoiceQuizRepository" as ChoiceQuizRepository
participant ": OrderingQuizRepository" as OrderingQuizRepository
participant ": MissingWordQuizRepository" as MissingWordQuizRepository

database Database

activate Frontend #LightBlue

Frontend -> Router: GET /api/classes
activate Router #LightGreen

Router -> Middleware: .Use(Middleware)
activate Middleware #LightPink
Middleware -> Middleware : .Verify()

alt Unauthorized (401 Unauthorized)
  Middleware --> Router: 401 Unauthorized
  deactivate Middleware
  Router --> Frontend: 401 Unauthorized
  deactivate Router
  Frontend --> User: Show error "Please log in"
else Authorized
  Middleware --> Router: Route to Router
  deactivate Middleware
  Router -> ClassController: .GetAllClasses()
  activate ClassController #LightBlue
  ClassController -> ClassService: .GetAllClasses()
  activate ClassService #LightGreen
  ClassService -> ClassRepository: .GetAllClasses()
  activate ClassRepository #LightPink
  ClassRepository -> Database: SELECT class_id, user_id, invite_code, title, description, accessibility FROM Classes WHERE user_id = <user_id>;
  activate Database #LightGray
  Database --> ClassRepository : Classes, Error
  deactivate Database
  ClassRepository --> ClassService : Classes, Error
  deactivate ClassRepository
  ClassService --> ClassController : Classes, Error
  deactivate ClassService

  alt Error != Null
    ClassController --> Router : 500 Internal Server Error
    deactivate ClassController
    Router --> Frontend : 500 Internal Server Error
    deactivate Router
    Frontend --> User : Show error "Failed to fetch classes"
  else Classes == Null
    ClassController --> Router : 404 Not Found
    deactivate ClassController
    Router --> Frontend : 404 Not Found
    deactivate Router
    Frontend --> User : Show message "Class not found"
  else
    ClassController --> Router : 200 OK
    deactivate ClassController
    Router --> Frontend : 200 OK
    deactivate Router
    Frontend --> User : Show classes list
  end
end

opt User selects a class
  User -> Frontend: .handleClassClick(classId)
  Frontend -> Router: GET /api/courses/{classId}
  activate Router #LightGreen

  Router -> Middleware: .Use(Middleware)
  activate Middleware #LightPink
  Middleware -> Middleware : .Verify()

  alt Unauthorized (401 Unauthorized)
    Middleware --> Router: 401 Unauthorized
    deactivate Middleware
    Router --> Frontend: 401 Unauthorized
    deactivate Router
    Frontend --> User: Show error "Please log in"
  else Authorized
    Middleware --> Router: Route to Router
    deactivate Middleware
    Router -> CourseController: .GetAllCourses(classId)
    activate CourseController #LightBlue
    CourseController -> CourseService: .GetAllCourses(classId)
    activate CourseService #LightGreen
    CourseService -> CourseRepository: .GetAllCourses(classId)
    activate CourseRepository #LightPink
    CourseRepository -> Database: SELECT course_id, class_id, title, description, difficult_level, number FROM Courses WHERE class_id = <class_id>;
    activate Database #LightGray
    Database --> CourseRepository : Courses, Error
    deactivate Database
    CourseRepository --> CourseService : Courses, Error
    deactivate CourseRepository
    CourseService --> CourseController : Courses, Error
    deactivate CourseService

    alt Error != Null
      CourseController --> Router : 500 Internal Server Error
      deactivate CourseController
      Router --> Frontend : 500 Internal Server Error
      deactivate Router
      Frontend --> User : Show error "Failed to fetch courses"
    else Courses == Null
      CourseController --> Router : 404 Not Found
      deactivate CourseController
      Router --> Frontend : 404 Not Found
      deactivate Router
      Frontend -> User: Show message "Course not found"
    else
      CourseController --> Router : 200 OK
      deactivate CourseController
      Router --> Frontend : 200 OK
      deactivate Router
      Frontend --> User : Show courses list
    end
  end

  opt User selects a course
    User -> Frontend: .handleCourseClick(courseId)
    Frontend -> User: Show course details
    User -> Frontend : handleCreateQuizClick(courseId)
    Frontend --> User : Show quiz creation form
    User -> Frontend : handleInputContent(content)

    User -> Frontend : handleSelectQuizType(quiz_type)
    alt quiz_type == single_choice
      Frontend --> User : Show single choice quiz form
      User -> Frontend : handleInputQuestions(questions)
      User -> Frontend : handleInputChoices(choices)
      User -> Frontend : handleInputSingleAnswers(answers)
    else quiz_type == multiple_choice
      Frontend --> User : Show multiple choice quiz form
      User -> Frontend : handleInputQuestions(questions)
      User -> Frontend : handleInputChoices(choices)
      User -> Frontend : handleInputMultipleAnswers(answers)
    else quiz_type == ordering_choice
      Frontend --> User : Show ordering choice quiz form
      User -> Frontend : handleInputQuestions(questions)
      User -> Frontend : handleInputChoices(choices)
      User -> Frontend : handleInputOrderingAnswers(answers)
    else quiz_type == missing_word_choice
      Frontend --> User : Show missing word choice quiz form
      User -> Frontend : handleInputQuestions(questions)
      User -> Frontend : handleInputChoices(choices)
      User -> Frontend : handleInputMissingWordAnswers(answers)
    end

    User -> Frontend : handleSubmitQuizClick(courseId, content, quiz_type, questions, choices, answers)
    Frontend -> Frontend : Validate quiz data
    alt Invalid Data
      Frontend --> User : Show error "Invalid input"
    else Valid Data
      Frontend -> Router: POST /api/quizzes
      activate Router #LightGreen
      Router -> Middleware: .Use(Middleware)
      activate Middleware #LightPink
      Middleware -> Middleware : .Verify()

      alt Unauthorized (401 Unauthorized)
        Middleware --> Router: 401 Unauthorized
        deactivate Middleware
        Router --> Frontend: 401 Unauthorized
        deactivate Router
        Frontend --> User: Show error "Please log in"
      else Authorized
        Middleware --> Router: Route to Router
        deactivate Middleware
        Router -> QuizController: .CreateQuiz(courseId, content, quiz_type, questions, choices, answers)
        activate QuizController #LightBlue
        QuizController -> QuizService: .CreateQuiz(courseId, content, quiz_type, questions, choices, answers)
        activate QuizService #LightGreen

        alt quiz_type == single_choice
          QuizService -> ChoiceQuizRepository: .CreateSingleChoiceQuiz(courseId, content, questions, choices, answers)
          activate ChoiceQuizRepository #LightPink
          ChoiceQuizRepository -> Database: INSERT INTO single_choice_quizzes (course_id, content, questions, choices, answers) VALUES (@course_id, @content, @questions, @choices, @answers)
          activate Database #LightGray
          Database --> ChoiceQuizRepository : Quiz, Error
          deactivate Database
          ChoiceQuizRepository --> QuizService : Quiz, Error
          deactivate ChoiceQuizRepository
        else quiz_type == multiple_choice
          QuizService -> ChoiceQuizRepository: .CreateMultipleChoiceQuiz(courseId, content, questions, choices, answers)
          activate ChoiceQuizRepository #LightPink
          ChoiceQuizRepository -> Database: INSERT INTO multiple_choice_quizzes (course_id, content, questions, choices, answers) VALUES (@course_id, @content, @questions, @choices, @answers)
          activate Database #LightGray
          Database --> ChoiceQuizRepository : Quiz, Error
          deactivate Database
          ChoiceQuizRepository --> QuizService : Quiz, Error
          deactivate ChoiceQuizRepository
        else quiz_type == ordering_choice
          QuizService -> OrderingQuizRepository: .CreateOrderingChoiceQuiz(courseId, content, questions, choices, answers)
          activate OrderingQuizRepository #LightPink
          OrderingQuizRepository -> Database: INSERT INTO ordering_quizzes (course_id, content, questions, choices, answers) VALUES (@course_id, @content, @questions, @choices, @answers)
          activate Database #LightGray
          Database --> OrderingQuizRepository : Quiz, Error
          deactivate Database
          OrderingQuizRepository --> QuizService : Quiz, Error
          deactivate OrderingQuizRepository
        else quiz_type == missing_word_choice
          QuizService -> MissingWordQuizRepository: .CreateMissingWordChoiceQuiz(courseId, content, questions, choices, answers)
          activate MissingWordQuizRepository #LightPink
          MissingWordQuizRepository -> Database: INSERT INTO missing_word_quizzes (course_id, content, questions, choices, answers) VALUES (@course_id, @content, @questions, @choices, @answers)
          activate Database #LightGray
          Database --> MissingWordQuizRepository : Quiz, Error
          deactivate Database
          MissingWordQuizRepository --> QuizService : Quiz, Error
          deactivate MissingWordQuizRepository
        end

        QuizService --> QuizController : Quiz, Error
        deactivate QuizService

        alt Error != Null
          QuizController --> Router : 500 Internal Server Error
          deactivate QuizController
          Router --> Frontend : 500 Internal Server Error
          deactivate Router
          Frontend --> User : Show error "Failed to create quiz"
        else Quiz == Null
          QuizController --> Router : 404 Not Found
          deactivate QuizController
          Router --> Frontend : 404 Not Found
          deactivate Router
          Frontend --> User : Show message "Quiz creation failed"
        else
          QuizController --> Router : 200 OK
          deactivate QuizController
          Router --> Frontend : 200 OK
          deactivate Router
          Frontend --> User : Show quiz created message
        end
      end
    end
  end
end

deactivate Frontend
@enduml
