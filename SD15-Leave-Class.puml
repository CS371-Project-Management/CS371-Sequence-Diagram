@startuml SequenceDiagram
title Leave Class

actor User

participant ": Frontend" as Frontend
participant ": Router" as Router
participant ": Middleware" as Middleware
participant ": ClassController" as ClassController
participant ": ClassService" as ClassService
participant ": ClassRepository" as ClassRepository
participant ": UserClassRepository" as UserClassRepository
participant ": UserCourseRepository" as UserCourseRepository
participant ": QuizHistoryRepository" as QuizHistoryRepository
participant ": ChoiceHistoryRepository" as ChoiceHistoryRepository
participant ": OrderingHistoryRepository" as OrderingHistoryRepository
participant ": MissingWordHistoryRepository" as MissingWordHistoryRepository

database Database

activate Frontend #LightBlue

' 1. User views their classes
Frontend -> Router: GET /api/classes/joined
activate Router #LightGreen

Router -> Middleware: .Use(Middleware)
activate Middleware #LightPink
Middleware -> Middleware: .Verify()

alt Unauthorized
  Middleware --> Router: 401 Unauthorized
  deactivate Middleware
  Router --> Frontend: 401 Unauthorized
  deactivate Router
  Frontend --> User: Show error "Please log in"
else Authorized
  Middleware --> Router: Continue
  deactivate Middleware

  Router -> ClassController: .GetUserClasses()
  activate ClassController #LightBlue
  ClassController -> ClassService: .GetUserClasses()
  activate ClassService #LightGreen
  ClassService -> ClassRepository: .GetUserClasses(userId)
  activate ClassRepository #LightPink
  ClassRepository -> Database: SELECT c.class_id, c.title, c.description \nFROM Classes c \nJOIN User_Classes uc ON c.class_id = uc.class_id \nWHERE uc.user_id = @userId
  activate Database #LightGray
  Database --> ClassRepository: Classes
  deactivate Database
  ClassRepository --> ClassService: Classes
  deactivate ClassRepository
  ClassService --> ClassController: Classes
  deactivate ClassService

  alt Error occurred
    ClassController --> Router: 500 Internal Server Error
    deactivate ClassController
    Router --> Frontend: 500 Internal Server Error
    deactivate Router
    Frontend --> User: Show error "Failed to fetch classes"
  else No classes found
    ClassController --> Router: 204 No Content
    deactivate ClassController
    Router --> Frontend: 204 No Content
    deactivate Router
    Frontend --> User: Show message "No classes found"
  else
    ClassController --> Router: 200 OK
    deactivate ClassController
    Router --> Frontend: 200 OK
    deactivate Router
    Frontend --> User: Show classes list
  end
end

opt User chooses to leave a class
  User -> Frontend: .handleLeaveClass(classId)
  Frontend -> Router: DELETE /api/classes/{classId}/leave
  activate Router #LightGreen

  Router -> Middleware: .Use(Middleware)
  activate Middleware #LightPink
  Middleware -> Middleware: .Verify()

  alt Unauthorized
    Middleware --> Router: 401 Unauthorized
    deactivate Middleware
    Router --> Frontend: 401 Unauthorized
    deactivate Router
    Frontend --> User: Show error "Please log in"
  else Authorized
    Middleware --> Router: Continue
    deactivate Middleware

    Router -> ClassController: .LeaveClass(classId)
    activate ClassController #LightBlue
    ClassController -> ClassService: .LeaveClass(userId, classId)
    activate ClassService #LightGreen

    ' 1. Remove class enrollment
    ClassService -> UserClassRepository: .DeleteByUserAndClass(userId, classId)
    activate UserClassRepository #LightPink
    UserClassRepository -> Database: DELETE FROM User_Classes \nWHERE user_id = @userId AND class_id = @classId
    activate Database #LightGray
    Database --> UserClassRepository: rowsAffected
    deactivate Database
    UserClassRepository --> ClassService: success
    deactivate UserClassRepository

    ' 2. Remove course enrollments
    ClassService -> UserCourseRepository: .DeleteByUserAndClass(userId, classId)
    activate UserCourseRepository #LightPink
    UserCourseRepository -> Database: DELETE uc FROM User_Courses uc \nJOIN Courses c ON uc.course_id = c.course_id \nWHERE uc.user_id = @userId AND c.class_id = @classId
    activate Database #LightGray
    Database --> UserCourseRepository: rowsAffected
    deactivate Database
    UserCourseRepository --> ClassService: success
    deactivate UserCourseRepository

    ' 3. Remove quiz histories
    ClassService -> QuizHistoryRepository: .DeleteByUserAndClass(userId, classId)
    activate QuizHistoryRepository #LightPink
    QuizHistoryRepository -> Database: DELETE qh FROM Quiz_Histories qh \nJOIN Quizzes q ON qh.quiz_id = q.quiz_id \nJOIN Courses c ON q.course_id = c.course_id \nWHERE qh.user_id = @userId AND c.class_id = @classId
    activate Database #LightGray
    Database --> QuizHistoryRepository: rowsAffected
    deactivate Database
    QuizHistoryRepository --> ClassService: success
    deactivate QuizHistoryRepository

    ' 4. Remove answer histories
    ClassService -> ChoiceHistoryRepository: .DeleteByUserAndClass(userId, classId)
    activate ChoiceHistoryRepository #LightPink
    ChoiceHistoryRepository -> Database: DELETE ch FROM Choice_Histories ch \nJOIN Quiz_Histories qh ON ch.quiz_history_id = qh.quiz_history_id \nJOIN Quizzes q ON qh.quiz_id = q.quiz_id \nJOIN Courses c ON q.course_id = c.course_id \nWHERE qh.user_id = @userId AND c.class_id = @classId
    activate Database #LightGray
    Database --> ChoiceHistoryRepository: rowsAffected
    deactivate Database
    ChoiceHistoryRepository --> ClassService: success
    deactivate ChoiceHistoryRepository

    ClassService -> OrderingHistoryRepository: .DeleteByUserAndClass(userId, classId)
    activate OrderingHistoryRepository #LightPink
    OrderingHistoryRepository -> Database: DELETE oh FROM Ordering_Histories oh \nJOIN Quiz_Histories qh ON oh.quiz_history_id = qh.quiz_history_id \nJOIN Quizzes q ON qh.quiz_id = q.quiz_id \nJOIN Courses c ON q.course_id = c.course_id \nWHERE qh.user_id = @userId AND c.class_id = @classId
    activate Database #LightGray
    Database --> OrderingHistoryRepository: rowsAffected
    deactivate Database
    OrderingHistoryRepository --> ClassService: success
    deactivate OrderingHistoryRepository

    ClassService -> MissingWordHistoryRepository: .DeleteByUserAndClass(userId, classId)
    activate MissingWordHistoryRepository #LightPink
    MissingWordHistoryRepository -> Database: DELETE mwh FROM Missing_Words_Histories mwh \nJOIN Quiz_Histories qh ON mwh.quiz_history_id = qh.quiz_history_id \nJOIN Quizzes q ON qh.quiz_id = q.quiz_id \nJOIN Courses c ON q.course_id = c.course_id \nWHERE qh.user_id = @userId AND c.class_id = @classId
    activate Database #LightGray
    Database --> MissingWordHistoryRepository: rowsAffected
    deactivate Database
    MissingWordHistoryRepository --> ClassService: success
    deactivate MissingWordHistoryRepository

    ClassService --> ClassController: success
    deactivate ClassService

    alt Error occurred
      ClassController --> Router: 500 Internal Server Error
      deactivate ClassController
      Router --> Frontend: 500 Internal Server Error
      deactivate Router
      Frontend --> User: Show error "Failed to leave class"
    else
      ClassController --> Router: 200 OK
      deactivate ClassController
      Router --> Frontend: 200 OK
      deactivate Router
      Frontend --> User: Show success "Successfully left class"
    end
  end
end

deactivate Frontend
@enduml