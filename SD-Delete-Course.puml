@startuml
title Delete Course

actor "ผู้ใช้" as User
participant "Frontend" as FE
participant "Router" as Router
participant "Middleware" as MW

'===== Phase 1: ดึงข้อมูล Class ที่ผู้ใช้เป็นผู้ดูแล =====
participant "Class Controller" as ClassCtrl
participant "Class Service" as ClassServ
participant "Class Repository" as ClassRepo
participant "Database" as DB

' Step 1: ระบบดึงข้อมูล class ที่ผู้ใช้เป็นผู้ดูแล
FE -> Router: GET /api/classes?admin=true  <<Step 1>>
activate Router
Router -> MW: validateSession()
activate MW
MW -> ClassCtrl: getAdminClasses(userID)
deactivate MW
activate ClassCtrl
ClassCtrl -> ClassServ: getAdminClasses(userID)
activate ClassServ
ClassServ -> ClassRepo: selectClassesByAdmin(userID)
activate ClassRepo
ClassRepo -> DB: SELECT id, name, description, privacy FROM classes WHERE owner_id = ?  <<Step 1>>
activate DB
DB --> ClassRepo: classList
deactivate DB
' Step 2: ตรวจสอบข้อมูล class
alt พบข้อมูล class (2a)
    ClassRepo --> ClassServ: classList
    deactivate ClassRepo
    ClassServ --> ClassCtrl: classList
    deactivate ClassServ
    ClassCtrl --> Router: successResponse(200, classList)  <<Step 2a.2>>
else ไม่พบข้อมูล class (2b)
    ClassRepo --> ClassServ: emptyList
    deactivate ClassRepo
    ClassServ -> ClassCtrl: returnError("ไม่พบข้อมูล class")
    deactivate ClassServ
    ClassCtrl -> Router: errorResponse(404, "ไม่พบข้อมูล class")  <<Step 2b.2>>
end
deactivate ClassCtrl
Router --> FE: response (classList or error)
deactivate Router
FE -> User: displayClassesList(classList)

'===== Phase 2: ดึงข้อมูล Course ภายใน class ที่เลือก =====
participant "Course Controller" as CourseCtrl
participant "Course Service" as CourseServ
participant "Course Repository" as CourseRepo

' Step 3: ผู้ใช้เลือก class ที่ต้องการ
User -> FE: เลือก class ที่ต้องการ  <<Step 3>>

' Step 4: ระบบดึงข้อมูล course จาก class ที่เลือก
FE -> Router: GET /api/courses?classID={classID}  <<Step 4>>
activate Router
Router -> MW: validateRequest()
activate MW
MW -> CourseCtrl: getCourses(classID)
deactivate MW
activate CourseCtrl
CourseCtrl -> CourseServ: getCourses(classID)
activate CourseServ
CourseServ -> CourseRepo: selectCoursesByClass(classID)
activate CourseRepo
CourseRepo -> DB: SELECT id, title, description FROM courses WHERE class_id = ?  <<Step 4>>
activate DB
DB --> CourseRepo: courseList
deactivate DB
' Step 5: ตรวจสอบข้อมูล course
alt พบข้อมูล course (5a)
    CourseRepo --> CourseServ: courseList
    deactivate CourseRepo
    CourseServ --> CourseCtrl: courseList
    deactivate CourseServ
    CourseCtrl --> Router: successResponse(200, courseList)  <<Step 5a.2>>
else ไม่พบข้อมูล course (5b)
    CourseRepo --> CourseServ: emptyList
    deactivate CourseRepo
    CourseServ -> CourseCtrl: returnError("ไม่พบข้อมูล course")
    deactivate CourseServ
    CourseCtrl -> Router: errorResponse(404, "ไม่พบข้อมูล course")  <<Step 5b.2>>
end
deactivate CourseCtrl
Router --> FE: response (courseList or error)
deactivate Router
FE -> User: displayCoursesList(courseList)

'===== Phase 3: ลบ Course =====
' Step 6: ผู้ใช้เลือก course ที่ต้องการ
User -> FE: เลือก course ที่ต้องการ  <<Step 6>>

' Step 7: ผู้ใช้กดปุ่มลบ course
User -> FE: กดปุ่มลบ course  <<Step 7>>

' Step 8: ผู้ใช้กดปุ่มยืนยันการลบ course
User -> FE: กดปุ่มยืนยันการลบ course  <<Step 8>>

' Step 9: ระบบลบ course และข้อมูลที่เกี่ยวข้อง
FE -> Router: DELETE /api/courses?courseID={courseID}  <<Step 9>>
activate Router
Router -> MW: validateRequest()
activate MW
MW -> CourseCtrl: deleteCourse(courseID)
deactivate MW
activate CourseCtrl
CourseCtrl -> CourseServ: deleteCourse(courseID)
activate CourseServ
CourseServ -> CourseRepo: deleteCourse(courseID)
activate CourseRepo

group ลบข้อมูลที่เกี่ยวข้อง (Step 9)
    CourseRepo -> DB: DELETE FROM courses WHERE id = ?  <<Step 9.1>>
    DB --> CourseRepo: affectedRows
    CourseRepo -> DB: DELETE FROM user_courses WHERE course_id = ?  <<Step 9.2>>
    DB --> CourseRepo: affectedRows
    CourseRepo -> DB: DELETE FROM quizzes WHERE course_id = ?  <<Step 9.3>>
    DB --> CourseRepo: affectedRows
    CourseRepo -> DB: DELETE FROM choice_quizzes WHERE course_id = ?  <<Step 9.4>>
    DB --> CourseRepo: affectedRows
    CourseRepo -> DB: DELETE FROM choice_answers WHERE course_id = ?  <<Step 9.5>>
    DB --> CourseRepo: affectedRows
    CourseRepo -> DB: DELETE FROM ordering_quizzes WHERE course_id = ?  <<Step 9.6>>
    DB --> CourseRepo: affectedRows
    CourseRepo -> DB: DELETE FROM ordering_answers WHERE course_id = ?  <<Step 9.7>>
    DB --> CourseRepo: affectedRows
    CourseRepo -> DB: DELETE FROM missing_words_quizzes WHERE course_id = ?  <<Step 9.8>>
    DB --> CourseRepo: affectedRows
    CourseRepo -> DB: DELETE FROM quiz_histories WHERE course_id = ?  <<Step 9.9>>
    DB --> CourseRepo: affectedRows
    CourseRepo -> DB: DELETE FROM choice_histories WHERE course_id = ?  <<Step 9.10>>
    DB --> CourseRepo: affectedRows
    CourseRepo -> DB: DELETE FROM ordering_histories WHERE course_id = ?  <<Step 9.11>>
    DB --> CourseRepo: affectedRows
    CourseRepo -> DB: DELETE FROM missing_words_histories WHERE course_id = ?  <<Step 9.12>>
    DB --> CourseRepo: affectedRows
end
deactivate CourseRepo
CourseServ --> CourseCtrl: deletionResult
deactivate CourseServ
CourseCtrl --> Router: successResponse(200, "ลบ course สำเร็จ")  <<Step 10a.2>>
deactivate CourseCtrl
Router --> FE: successResponse(200, "ลบ course สำเร็จ")
deactivate Router
FE -> User: displayMessage("ลบ course สำเร็จ")

'===== Alternate Flow: หากการลบล้มเหลว =====
' (หากในขั้นตอน 10 ระบบไม่สามารถลบ course ได้)
' CourseCtrl -> Router: errorResponse(500, "ไม่สามารถลบ course ได้")  <<Step 10b.2>>
' FE -> User: displayMessage("ไม่สามารถลบ course ได้")

@enduml
