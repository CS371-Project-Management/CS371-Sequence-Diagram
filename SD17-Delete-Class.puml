@startuml SequenceDiagram
title Delete Class

actor User
participant ": Frontend" as Frontend
participant ": Router" as Router
participant ": Middleware" as Middleware
participant ": ClassController" as ClassController
participant ": ClassService" as ClassService
participant ": ClassRepository" as ClassRepository
participant ": UserClassRepository" as UserClassRepository
participant ": CourseRepository" as CourseRepository
participant ": UserCourseRepository" as UserCourseRepository
participant ": QuizRepository" as QuizRepository
participant ": ChoiceQuizRepository" as ChoiceQuizRepository
participant ": OrderingQuizRepository" as OrderingQuizRepository
participant ": MissingWordQuizRepository" as MissingWordQuizRepository
participant ": QuizHistoryRepository" as QuizHistoryRepository
participant ": ChoiceHistoryRepository" as ChoiceHistoryRepository
participant ": OrderingHistoryRepository" as OrderingHistoryRepository
participant ": MissingWordHistoryRepository" as MissingWordHistoryRepository

database Database

activate Frontend #LightBlue

' 1. User views their classes
Frontend -> Router: GET /api/classes/managed
activate Router #LightGreen

Router -> Middleware: .Use(Middleware)
activate Middleware #LightPink
Middleware -> Middleware: .Verify()

alt Unauthorized
  Middleware --> Router: 401 Unauthorized
  deactivate Middleware
  Router --> Frontend: 401 Unauthorized
  deactivate Router
  Frontend --> User: Show error "Please log in"
else Authorized
  Middleware --> Router: Continue
  deactivate Middleware

  Router -> ClassController: .GetManagedClasses()
  activate ClassController #LightBlue
  ClassController -> ClassService: .GetManagedClasses()
  activate ClassService #LightGreen
  ClassService -> ClassRepository: .GetClassesByOwner(userId)
  activate ClassRepository #LightPink
  ClassRepository -> Database: SELECT class_id, title FROM Classes WHERE user_id = @userId
  activate Database #LightGray
  Database --> ClassRepository: Classes
  deactivate Database
  ClassRepository --> ClassService: Classes
  deactivate ClassRepository
  ClassService --> ClassController: Classes
  deactivate ClassService

  alt Error occurred
    ClassController --> Router: 500 Internal Server Error
    deactivate ClassController
    Router --> Frontend: 500 Internal Server Error
    deactivate Router
    Frontend --> User: Show error "Failed to fetch classes"
  else No classes found
    ClassController --> Router: 204 No Content
    deactivate ClassController
    Router --> Frontend: 204 No Content
    deactivate Router
    Frontend --> User: Show message "No classes found"
  else
    ClassController --> Router: 200 OK
    deactivate ClassController
    Router --> Frontend: 200 OK
    deactivate Router
    Frontend --> User: Show managed classes list
  end
end

opt User selects class to delete
  User -> Frontend: .handleDeleteClass(classId)
  Frontend -> Router: DELETE /api/classes/{classId}
  activate Router #LightGreen

  Router -> Middleware: .Use(Middleware)
  activate Middleware #LightPink
  Middleware -> Middleware: .Verify()

  alt Unauthorized
    Middleware --> Router: 401 Unauthorized
    deactivate Middleware
    Router --> Frontend: 401 Unauthorized
    deactivate Router
    Frontend --> User: Show error "Please log in"
  else Authorized
    Middleware --> Router: Continue
    deactivate Middleware

    Router -> ClassController: .DeleteClass(classId)
    activate ClassController #LightBlue
    ClassController -> ClassService: .DeleteClass(classId)
    activate ClassService #LightGreen

    ' 1. Delete class enrollments
    ClassService -> UserClassRepository: .DeleteByClass(classId)
    activate UserClassRepository #LightPink
    UserClassRepository -> Database: DELETE FROM User_Classes WHERE class_id = @classId
    activate Database #LightGray
    Database --> UserClassRepository: rowsAffected
    deactivate Database
    UserClassRepository --> ClassService: success
    deactivate UserClassRepository

    ' 2. Get courses for deletion
    ClassService -> CourseRepository: .GetCoursesByClass(classId)
    activate CourseRepository #LightPink
    CourseRepository -> Database: SELECT course_id FROM Courses WHERE class_id = @classId
    activate Database #LightGray
    Database --> CourseRepository: Courses
    deactivate Database
    CourseRepository --> ClassService: Courses
    deactivate CourseRepository

    loop for each course in Courses
      ' 3. Delete course enrollments
      ClassService -> UserCourseRepository: .DeleteByCourse(course.course_id)
      activate UserCourseRepository #LightPink
      UserCourseRepository -> Database: DELETE FROM User_Courses WHERE course_id = @courseId
      activate Database #LightGray
      Database --> UserCourseRepository: rowsAffected
      deactivate Database
      UserCourseRepository --> ClassService: success
      deactivate UserCourseRepository

      ' 4. Delete quizzes
      ClassService -> QuizRepository: .DeleteByCourse(course.course_id)
      activate QuizRepository #LightPink
      QuizRepository -> Database: DELETE FROM Quizzes WHERE course_id = @courseId
      activate Database #LightGray
      Database --> QuizRepository: rowsAffected
      deactivate Database

      ' 5. Delete quiz questions and answers
      QuizRepository -> ChoiceQuizRepository: .DeleteByCourse(course.course_id)
      activate ChoiceQuizRepository #LightPink
      ChoiceQuizRepository -> Database: DELETE cq FROM Choice_Quizzes cq JOIN Quizzes q ON cq.quiz_id = q.quiz_id WHERE q.course_id = @courseId
      activate Database #LightGray
      Database --> ChoiceQuizRepository: rowsAffected
      deactivate Database
      ChoiceQuizRepository --> QuizRepository: success
      deactivate ChoiceQuizRepository

      QuizRepository -> ChoiceQuizRepository: .DeleteAnswersByCourse(course.course_id)
      activate ChoiceQuizRepository #LightPink
      ChoiceQuizRepository -> Database: DELETE ca FROM Choice_Answers ca JOIN Quizzes q ON ca.quiz_id = q.quiz_id WHERE q.course_id = @courseId
      activate Database #LightGray
      Database --> ChoiceQuizRepository: rowsAffected
      deactivate Database
      ChoiceQuizRepository --> QuizRepository: success
      deactivate ChoiceQuizRepository

      QuizRepository -> OrderingQuizRepository: .DeleteByCourse(course.course_id)
      activate OrderingQuizRepository #LightPink
      OrderingQuizRepository -> Database: DELETE oq FROM Ordering_Quizzes oq JOIN Quizzes q ON oq.quiz_id = q.quiz_id WHERE q.course_id = @courseId
      activate Database #LightGray
      Database --> OrderingQuizRepository: rowsAffected
      deactivate Database
      OrderingQuizRepository --> QuizRepository: success
      deactivate OrderingQuizRepository

      QuizRepository -> MissingWordQuizRepository: .DeleteByCourse(course.course_id)
      activate MissingWordQuizRepository #LightPink
      MissingWordQuizRepository -> Database: DELETE mwq FROM Missing_Words_Quizzes mwq JOIN Quizzes q ON mwq.quiz_id = q.quiz_id WHERE q.course_id = @courseId
      activate Database #LightGray
      Database --> MissingWordQuizRepository: rowsAffected
      deactivate Database
      MissingWordQuizRepository --> QuizRepository: success
      deactivate MissingWordQuizRepository

      ' 6. Delete quiz histories
      QuizRepository -> QuizHistoryRepository: .DeleteByCourse(course.course_id)
      activate QuizHistoryRepository #LightPink
      QuizHistoryRepository -> Database: DELETE qh FROM Quiz_Histories qh JOIN Quizzes q ON qh.quiz_id = q.quiz_id WHERE q.course_id = @courseId
      activate Database #LightGray
      Database --> QuizHistoryRepository: rowsAffected
      deactivate Database

      QuizHistoryRepository -> ChoiceHistoryRepository: .DeleteByCourse(course.course_id)
      activate ChoiceHistoryRepository #LightPink
      ChoiceHistoryRepository -> Database: DELETE ch FROM Choice_Histories ch JOIN Quiz_Histories qh ON ch.quiz_history_id = qh.quiz_history_id JOIN Quizzes q ON qh.quiz_id = q.quiz_id WHERE q.course_id = @courseId
      activate Database #LightGray
      Database --> ChoiceHistoryRepository: rowsAffected
      deactivate Database
      ChoiceHistoryRepository --> QuizHistoryRepository: success
      deactivate ChoiceHistoryRepository

      QuizHistoryRepository -> OrderingHistoryRepository: .DeleteByCourse(course.course_id)
      activate OrderingHistoryRepository #LightPink
      OrderingHistoryRepository -> Database: DELETE oh FROM Ordering_Histories oh JOIN Quiz_Histories qh ON oh.quiz_history_id = qh.quiz_history_id JOIN Quizzes q ON qh.quiz_id = q.quiz_id WHERE q.course_id = @courseId
      activate Database #LightGray
      Database --> OrderingHistoryRepository: rowsAffected
      deactivate Database
      OrderingHistoryRepository --> QuizHistoryRepository: success
      deactivate OrderingHistoryRepository

      QuizHistoryRepository -> MissingWordHistoryRepository: .DeleteByCourse(course.course_id)
      activate MissingWordHistoryRepository #LightPink
      MissingWordHistoryRepository -> Database: DELETE mwh FROM Missing_Words_Histories mwh JOIN Quiz_Histories qh ON mwh.quiz_history_id = qh.quiz_history_id JOIN Quizzes q ON qh.quiz_id = q.quiz_id WHERE q.course_id = @courseId
      activate Database #LightGray
      Database --> MissingWordHistoryRepository: rowsAffected
      deactivate Database
      MissingWordHistoryRepository --> QuizHistoryRepository: success
      deactivate MissingWordHistoryRepository

      QuizHistoryRepository --> QuizRepository: success
      deactivate QuizHistoryRepository
      QuizRepository --> ClassService: success
      deactivate QuizRepository

      ' 7. Delete course
      ClassService -> CourseRepository: .Delete(course.course_id)
      activate CourseRepository #LightPink
      CourseRepository -> Database: DELETE FROM Courses WHERE course_id = @courseId
      activate Database #LightGray
      Database --> CourseRepository: rowsAffected
      deactivate Database
      CourseRepository --> ClassService: success
      deactivate CourseRepository
    end

    ' 8. Delete class
    ClassService -> ClassRepository: .Delete(classId)
    activate ClassRepository #LightPink
    ClassRepository -> Database: DELETE FROM Classes WHERE class_id = @classId
    activate Database #LightGray
    Database --> ClassRepository: rowsAffected
    deactivate Database
    ClassRepository --> ClassService: success
    deactivate ClassRepository

    ClassService --> ClassController: success
    deactivate ClassService

    alt Error occurred
      ClassController --> Router: 500 Internal Server Error
      deactivate ClassController
      Router --> Frontend: 500 Internal Server Error
      deactivate Router
      Frontend --> User: Show error "Failed to delete class"
    else
      ClassController --> Router: 204 No Content
      deactivate ClassController
      Router --> Frontend: 204 No Content
      deactivate Router
      Frontend --> User: Show success "Class deleted successfully"
    end
  end
end

deactivate Frontend
@enduml