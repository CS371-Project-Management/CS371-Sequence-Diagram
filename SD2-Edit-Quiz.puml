@startuml SequenceDiagram
title Edit Quiz

actor User
participant ": Frontend" as Frontend
participant ": Router" as Router
participant ": Middleware" as Middleware

participant ": ClassController" as ClassController
participant ": ClassService" as ClassService
participant ": ClassRepository" as ClassRepository

participant ": CourseController" as CourseController
participant ": CourseService" as CourseService
participant ": CourseRepository" as CourseRepository

participant ": QuizController" as QuizController
participant ": QuizService" as QuizService
participant ": QuizRepository" as QuizRepository
participant ": ChoiceQuizRepository" as ChoiceQuizRepository
participant ": OrderingQuizRepository" as OrderingQuizRepository
participant ": MissingWordQuizRepository" as MissingWordQuizRepository

database Database

activate Frontend #LightBlue

Frontend -> Router: GET /api/classes
activate Router #LightGreen

Router -> Middleware: .Use(Middleware)
activate Middleware #LightPink
Middleware -> Middleware : .Verify()

alt Unauthorized (401 Unauthorized)
  Middleware --> Router: 401 Unauthorized
  deactivate Middleware
  Router --> Frontend: 401 Unauthorized
  deactivate Router
  Frontend --> User: Show error "Please log in"
else Authorized
  Middleware --> Router: Route to Router
  deactivate Middleware
  Router -> ClassController: .GetAllClasses()
  activate ClassController #LightBlue
  ClassController -> ClassService: .GetAllClasses()
  activate ClassService #LightGreen
  ClassService -> ClassRepository: .GetAllClasses()
  activate ClassRepository #LightPink
  ClassRepository -> Database: SELECT class_id, user_id, invite_code, title, description, accessibility FROM Classes WHERE user_id = <user_id>
  activate Database #LightGray
  Database --> ClassRepository : Classes
  deactivate Database
  ClassRepository --> ClassService : Classes
  deactivate ClassRepository
  ClassService --> ClassController : Classes
  deactivate ClassService

  ClassController --> Router : 200 OK
  deactivate ClassController
  Router --> Frontend : 200 OK
  deactivate Router
  Frontend --> User : Show classes list
end

opt User selects a class
  User -> Frontend: .handleClassClick(classId)
  Frontend -> Router: GET /api/courses/{classId}
  activate Router #LightGreen

  Router -> Middleware: .Use(Middleware)
  activate Middleware #LightPink
  Middleware -> Middleware : .Verify()

  alt Unauthorized
    Middleware --> Router: 401 Unauthorized
    deactivate Middleware
    Router --> Frontend: 401 Unauthorized
    deactivate Router
    Frontend --> User: Show error
  else Authorized
    Middleware --> Router: Route to Router
    deactivate Middleware
    Router -> CourseController: .GetAllCourses(classId)
    activate CourseController #LightBlue
    CourseController -> CourseService: .GetAllCourses(classId)
    activate CourseService #LightGreen
    CourseService -> CourseRepository: .GetAllCourses(classId)
    activate CourseRepository #LightPink
    CourseRepository -> Database: SELECT course_id, class_id, title, description, difficult_level, number FROM Courses WHERE class_id = <class_id>
    activate Database #LightGray
    Database --> CourseRepository : Courses
    deactivate Database
    CourseRepository --> CourseService : Courses
    deactivate CourseRepository
    CourseService --> CourseController : Courses
    deactivate CourseService

    CourseController --> Router : 200 OK
    deactivate CourseController
    Router --> Frontend : 200 OK
    deactivate Router
    Frontend --> User : Show courses list
  end

  opt User selects a course
    User -> Frontend: .handleCourseClick(courseId)
    Frontend -> Router: GET /api/quizzes?courseId={courseId}
    activate Router #LightGreen

    Router -> Middleware: .Use(Middleware)
    activate Middleware #LightPink
    Middleware -> Middleware : .Verify()

    alt Unauthorized
      Middleware --> Router: 401 Unauthorized
      deactivate Middleware
      Router --> Frontend: 401 Unauthorized
      deactivate Router
      Frontend --> User: Show error
    else Authorized
      Middleware --> Router: Route to Router
      deactivate Middleware
      Router -> QuizController: .GetQuizzes(courseId)
      activate QuizController #LightBlue
      QuizController -> QuizService: .GetQuizzes(courseId)
      activate QuizService #LightGreen
      QuizService -> QuizRepository: .GetQuizzes(courseId)
      activate QuizRepository #LightPink
      QuizRepository -> Database: SELECT quiz_id, course_id, number, quiz_type, lesson, point FROM Quizzes WHERE course_id = <course_id>
      activate Database #LightGray
      Database --> QuizRepository : Quizzes
      deactivate Database
      QuizRepository --> QuizService : Quizzes
      deactivate QuizRepository

      alt quiz_type == choice
        QuizService -> ChoiceQuizRepository: .GetQuestions(courseId)
        activate ChoiceQuizRepository #LightPink
        ChoiceQuizRepository -> Database: SELECT cq.quiz_id, cq.question, cq.type FROM Choice_Quizzes cq JOIN Quizzes q ON q.quiz_id = cq.quiz_id WHERE q.course_id = <course_id>
        activate Database #LightGray
        Database --> ChoiceQuizRepository : Questions
        deactivate Database
        ChoiceQuizRepository --> QuizService : Questions
        deactivate ChoiceQuizRepository

        QuizService -> ChoiceQuizRepository: .GetAnswers(courseId)
        activate ChoiceQuizRepository #LightPink
        ChoiceQuizRepository -> Database: SELECT ca.choice_answer_id, ca.quiz_id, ca.answer, ca.result FROM Choice_Answers ca JOIN Quizzes q ON q.quiz_id = ca.quiz_id WHERE q.course_id = <course_id>
        activate Database #LightGray
        Database --> ChoiceQuizRepository : Answers
        deactivate Database
        ChoiceQuizRepository --> QuizService : Answers
        deactivate ChoiceQuizRepository
      else quiz_type == ordering
        QuizService -> OrderingQuizRepository: .GetQuestions(courseId)
        activate OrderingQuizRepository #LightPink
        OrderingQuizRepository -> Database: SELECT oq.quiz_id, oq.question FROM Ordering_Quizzes oq JOIN Quizzes q ON q.quiz_id = oq.quiz_id WHERE q.course_id = <course_id>
        activate Database #LightGray
        Database --> OrderingQuizRepository : Questions
        deactivate Database
        OrderingQuizRepository --> QuizService : Questions
        deactivate OrderingQuizRepository

        QuizService -> OrderingQuizRepository: .GetAnswers(courseId)
        activate OrderingQuizRepository #LightPink
        OrderingQuizRepository -> Database: SELECT oa.ordering_answer_id, oa.quiz_id, oa.answer, oa.order FROM Ordering_Answers oa JOIN Quizzes q ON q.quiz_id = oa.quiz_id WHERE q.course_id = <course_id>
        activate Database #LightGray
        Database --> OrderingQuizRepository : Answers
        deactivate Database
        OrderingQuizRepository --> QuizService : Answers
        deactivate OrderingQuizRepository
      else quiz_type == missing_word
        QuizService -> MissingWordQuizRepository: .GetQuestions(courseId)
        activate MissingWordQuizRepository #LightPink
        MissingWordQuizRepository -> Database: SELECT mwq.quiz_id, mwq.question, mwq.answer FROM Missing_Words_Quizzes mwq JOIN Quizzes q ON q.quiz_id = mwq.quiz_id WHERE q.course_id = <course_id>
        activate Database #LightGray
        Database --> MissingWordQuizRepository : Questions
        deactivate Database
        MissingWordQuizRepository --> QuizService : Questions
        deactivate MissingWordQuizRepository
      end

      QuizService --> QuizController : QuizData
      deactivate QuizService
      QuizController --> Router : 200 OK
      deactivate QuizController
      Router --> Frontend : 200 OK
      deactivate Router
      Frontend --> User : Show quizzes list
    end

    opt User selects a quiz to edit
      User -> Frontend: .handleQuizClick(quizId)
      Frontend -> Router: GET /api/quizzes/{quizId}
      activate Router #LightGreen

      Router -> Middleware: .Use(Middleware)
      activate Middleware #LightPink
      Middleware -> Middleware : .Verify()

      alt Unauthorized
        Middleware --> Router: 401 Unauthorized
        deactivate Middleware
        Router --> Frontend: 401 Unauthorized
        deactivate Router
        Frontend --> User: Show error
      else Authorized
        Middleware --> Router: Route to Router
        deactivate Middleware
        Router -> QuizController: .GetQuiz(quizId)
        activate QuizController #LightBlue
        QuizController -> QuizService: .GetQuiz(quizId)
        activate QuizService #LightGreen
        QuizService -> QuizRepository: .GetQuiz(quizId)
        activate QuizRepository #LightPink
        QuizRepository -> Database: SELECT * FROM Quizzes WHERE quiz_id = <quiz_id>
        activate Database #LightGray
        Database --> QuizRepository : Quiz
        deactivate Database
        QuizRepository --> QuizService : Quiz
        deactivate QuizRepository

        alt quiz_type == choice
          QuizService -> ChoiceQuizRepository: .GetQuestion(quizId)
          activate ChoiceQuizRepository #LightPink
          ChoiceQuizRepository -> Database: SELECT * FROM Choice_Quizzes WHERE quiz_id = <quiz_id>
          activate Database #LightGray
          Database --> ChoiceQuizRepository : Question
          deactivate Database
          ChoiceQuizRepository --> QuizService : Question
          deactivate ChoiceQuizRepository

          QuizService -> ChoiceQuizRepository: .GetAnswers(quizId)
          activate ChoiceQuizRepository #LightPink
          ChoiceQuizRepository -> Database: SELECT * FROM Choice_Answers WHERE quiz_id = <quiz_id>
          activate Database #LightGray
          Database --> ChoiceQuizRepository : Answers
          deactivate Database
          ChoiceQuizRepository --> QuizService : Answers
          deactivate ChoiceQuizRepository
        else quiz_type == ordering
          QuizService -> OrderingQuizRepository: .GetQuestion(quizId)
          activate OrderingQuizRepository #LightPink
          OrderingQuizRepository -> Database: SELECT * FROM Ordering_Quizzes WHERE quiz_id = <quiz_id>
          activate Database #LightGray
          Database --> OrderingQuizRepository : Question
          deactivate Database
          OrderingQuizRepository --> QuizService : Question
          deactivate OrderingQuizRepository

          QuizService -> OrderingQuizRepository: .GetAnswers(quizId)
          activate OrderingQuizRepository #LightPink
          OrderingQuizRepository -> Database: SELECT * FROM Ordering_Answers WHERE quiz_id = <quiz_id>
          activate Database #LightGray
          Database --> OrderingQuizRepository : Answers
          deactivate Database
          OrderingQuizRepository --> QuizService : Answers
          deactivate OrderingQuizRepository
        else quiz_type == missing_word
          QuizService -> MissingWordQuizRepository: .GetQuestion(quizId)
          activate MissingWordQuizRepository #LightPink
          MissingWordQuizRepository -> Database: SELECT * FROM Missing_Words_Quizzes WHERE quiz_id = <quiz_id>
          activate Database #LightGray
          Database --> MissingWordQuizRepository : Question
          deactivate Database
          MissingWordQuizRepository --> QuizService : Question
          deactivate MissingWordQuizRepository
        end

        QuizService --> QuizController : FullQuizData
        deactivate QuizService
        QuizController --> Router : 200 OK
        deactivate QuizController
        Router --> Frontend : 200 OK
        deactivate Router
        Frontend --> User : Show quiz edit form
      end

      opt User submits edited quiz
        User -> Frontend: .handleSubmitQuizEdit(quizId, content, quiz_type, questions, choices, answers)
        Frontend -> Router: PUT /api/quizzes/{quizId}
        activate Router #LightGreen

        Router -> Middleware: .Use(Middleware)
        activate Middleware #LightPink
        Middleware -> Middleware : .Verify()

        alt Unauthorized
          Middleware --> Router: 401 Unauthorized
          deactivate Middleware
          Router --> Frontend: 401 Unauthorized
          deactivate Router
          Frontend --> User: Show error
        else Authorized
          Middleware --> Router: Route to Router
          deactivate Middleware
          Router -> QuizController: .EditQuiz(quizId, content, quiz_type, questions, choices, answers)
          activate QuizController #LightBlue
          QuizController -> QuizService: .EditQuiz(quizId, content, quiz_type, questions, choices, answers)
          activate QuizService #LightGreen

          QuizService -> QuizRepository: .UpdateQuiz(quizId, content, quiz_type)
          activate QuizRepository #LightPink
          QuizRepository -> Database: UPDATE Quizzes SET quiz_type = <quiz_type>, number = <number>, point = <point> WHERE quiz_id = <quiz_id>
          activate Database #LightGray
          Database --> QuizRepository : Success
          deactivate Database
          QuizRepository --> QuizService : Success
          deactivate QuizRepository

          alt quiz_type == choice
            QuizService -> ChoiceQuizRepository: .UpdateQuestion(quizId, questions)
            activate ChoiceQuizRepository #LightPink
            ChoiceQuizRepository -> Database: UPDATE Choice_Quizzes SET question = <question>, type = <type> WHERE quiz_id = <quiz_id>
            activate Database #LightGray
            Database --> ChoiceQuizRepository : Success
            deactivate Database

            loop for each answer
              QuizService -> ChoiceQuizRepository: .UpdateAnswer(answerId, answer, result)
              ChoiceQuizRepository -> Database: UPDATE Choice_Answers SET answer = <answer>, result = <result> WHERE choice_answer_id = <choice_answer_id>
              activate Database #LightGray
              Database --> ChoiceQuizRepository : Success
              deactivate Database
            end
            ChoiceQuizRepository --> QuizService : Success
            deactivate ChoiceQuizRepository
          else quiz_type == ordering
            QuizService -> OrderingQuizRepository: .UpdateQuestion(quizId, questions)
            activate OrderingQuizRepository #LightPink
            OrderingQuizRepository -> Database: UPDATE Ordering_Quizzes SET question = <question> WHERE quiz_id = <quiz_id>
            activate Database #LightGray
            Database --> OrderingQuizRepository : Success
            deactivate Database

            loop for each answer
              QuizService -> OrderingQuizRepository: .UpdateAnswer(answerId, answer, order)
              OrderingQuizRepository -> Database: UPDATE Ordering_Answers SET answer = <answer>, order = <order> WHERE ordering_answer_id = <ordering_answer_id>
              activate Database #LightGray
              Database --> OrderingQuizRepository : Success
              deactivate Database
            end
            OrderingQuizRepository --> QuizService : Success
            deactivate OrderingQuizRepository
          else quiz_type == missing_word
            QuizService -> MissingWordQuizRepository: .UpdateQuestion(quizId, questions, answers)
            activate MissingWordQuizRepository #LightPink
            MissingWordQuizRepository -> Database: UPDATE Missing_Words_Quizzes SET question = <question>, answer = <answer> WHERE quiz_id = <quiz_id>
            activate Database #LightGray
            Database --> MissingWordQuizRepository : Success
            deactivate Database
            MissingWordQuizRepository --> QuizService : Success
            deactivate MissingWordQuizRepository
          end

          QuizService --> QuizController : Success
          deactivate QuizService
          QuizController --> Router : 200 OK
          deactivate QuizController
          Router --> Frontend : 200 OK
          deactivate Router
          Frontend --> User : Show success "Quiz updated"
        end
      end
    end
  end
end

deactivate Frontend
@enduml