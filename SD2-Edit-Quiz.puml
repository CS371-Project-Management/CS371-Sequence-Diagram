@startuml SequenceDiagram
title Edit Quiz

actor User

participant ": Frontend" as Frontend
participant ": Router" as Router
participant ": Middleware" as Middleware

participant ": ClassController" as ClassController
participant ": ClassService" as ClassService
participant ": ClassRepository" as ClassRepository

participant ": CourseController" as CourseController
participant ": CourseService" as CourseService
participant ": CourseRepository" as CourseRepository

participant ": QuizController" as QuizController
participant ": QuizService" as QuizService
participant ": QuizRepository" as QuizRepository

database Database

activate Frontend

Frontend -> Router: GET /api/classes
activate Router

Router -> Middleware: .Use(Middleware)
activate Middleware
Middleware -> Middleware : .Verify()

alt Unauthorized (401 Unauthorized)
  Middleware -->> Router: 401 Unauthorized
  Router -->> Frontend: 401 Unauthorized
  Frontend -->> User: Show error "Please log in"
else Authorized
  Middleware -->> Router: Route to Router
  deactivate Middleware
  Router -> ClassController: .GetAllClasses()
  activate ClassController
  ClassController -> ClassService: .GetAllClasses()
  activate ClassService
  ClassService -> ClassRepository: .GetAllClasses()
  activate ClassRepository
  ClassRepository -> Database: SELECT class_id, user_id, invite_code, title, description, accessibility FROM Classes WHERE user_id = <user_id>;
  activate Database
  Database -->> ClassRepository : Classes, Error
  deactivate Database
  ClassRepository -->> ClassService : Classes, Error
  deactivate ClassRepository
  ClassService -->> ClassController : Classes, Error
  deactivate ClassService
  alt Error != Null
    ClassController -->> Router : 500 Internal Server Error
    Router -->> Frontend : 500 Internal Server Error
    Frontend -->> User : Show error "Failed to fetch classes"
  else Classes == Null
    ClassController -->> Router : 404 Not Found
    Router -->> Frontend : 404 Not Found
    Frontend -->> User : Show message "Class not found"
  else
    ClassController -->> Router : 200 OK
    Router -->> Frontend : 200 OK
    Frontend -->> User : Show classes list
  end
  deactivate ClassController
  deactivate Router

  opt User selects a class
    User -> Frontend: .handleClassClick(classId)
    Frontend -> Router: GET /api/courses/{classId}
    activate Router

    Router -> Middleware: .Use(Middleware)
    activate Middleware
    Middleware -> Middleware : .Verify()

    alt Unauthorized (401 Unauthorized)
        Middleware -->> Router: 401 Unauthorized
        Router -->> Frontend: 401 Unauthorized
        Frontend -->> User: Show error "Please log in"
    else Authorized
        Middleware -->> Router: Route to Router
        deactivate Middleware
        Router -> CourseController: .GetAllCourses(classId)
        activate CourseController
        CourseController -> CourseService: .GetAllCourses(classId)
        activate CourseService
        CourseService -> CourseRepository: .GetAllCourses(classId)
        activate CourseRepository
        CourseRepository -> Database: SELECT * FROM courses WHERE class_id = @class_id
        activate Database
        Database -->> CourseRepository : Courses, Error
        deactivate Database
        CourseRepository -->> CourseService : Courses, Error
        deactivate CourseRepository
        CourseService -->> CourseController : Courses, Error
        deactivate CourseService
        alt Error != Null
            CourseController -->> Router : 500 Internal Server Error
            Router -->> Frontend : 500 Internal Server Error
            Frontend -->> User : Show error "Failed to fetch courses"
        else Courses == Null
            CourseController -->> Router : 404 Not Found
            Router -->> Frontend : 404 Not Found
            Frontend -->> User : Show message "Course not found"
        else
            CourseController -->> Router : 200 OK
            Router -->> Frontend : 200 OK
            Frontend -->> User : Show courses list
        end
        deactivate CourseController
        deactivate Router

        opt User selects a course
          User -> Frontend: .handleCourseClick(courseId)
          Frontend -> Router: GET /api/courses/{courseId}
          activate Router
          Router -> Middleware: .Use(Middleware)
          activate Middleware
          Middleware -> Middleware : .Verify()
          alt Unauthorized (401 Unauthorized)
            Middleware -->> Router: 401 Unauthorized
            Router -->> Frontend: 401 Unauthorized
            Frontend -->> User: Show error "Please log in"
          else Authorized
            Middleware -->> Router: Route to Router
            deactivate Middleware
            Router -> QuizController: .GetQuizzes(courseId)
            activate QuizController
            QuizController -> QuizService: .GetQuizzes(courseId)
            activate QuizService
            QuizService -> QuizRepository: .GetQuizzes(courseId)
            activate QuizRepository
            QuizRepository -> Database: SELECT * FROM quizzes WHERE course_id = @course_id
            activate Database
            Database -->> QuizRepository : Quizzes
            deactivate Database
            QuizRepository -->> QuizService : Quizzes
            deactivate QuizRepository
            QuizService -->> QuizController : Quizzes
            deactivate QuizService
            alt Error != Null
              QuizController -->> Router : 500 Internal Server Error
              Router -->> Frontend : 500 Internal Server Error
              Frontend -->> User : Show error "Failed to fetch quizzes"
            else Quizzes == Null
              QuizController -->> Router : 404 Not Found
              Router -->> Frontend : 404 Not Found
              Frontend -->> User : Show message "Quiz not found"
            else
              QuizController -->> Router : 200 OK
              Router -->> Frontend : 200 OK
              Frontend -->> User : Show quizzes list
            end
            deactivate QuizController
            deactivate Router

            opt User selects a quiz
              User -> Frontend: .handleQuizClick(quizId)
              Frontend -> Router: GET /api/quizzes/{quizId}
              activate Router
              Router -> Middleware: .Use(Middleware)
              activate Middleware
              Middleware -> Middleware : .Verify()
              alt Unauthorized (401 Unauthorized)
                Middleware -->> Router: 401 Unauthorized
                Router -->> Frontend: 401 Unauthorized
                Frontend -->> User: Show error "Please log in"
              else Authorized
                Middleware -->> Router: Route to Router
                deactivate Middleware
                Router -> QuizController: .GetQuiz(quizId)
                activate QuizController
                QuizController -> QuizService: .GetQuiz(quizId)
                activate QuizService
                QuizService -> QuizRepository: .GetQuiz(quizId)]
                activate QuizRepository
                QuizRepository -> Database: SELECT * FROM quizzes WHERE id = @quiz_id
                activate Database
                Database -->> QuizRepository : Quiz, Error
                deactivate Database
                QuizRepository -->> QuizService : Quiz, Error
                deactivate QuizRepository
                QuizService -->> QuizController : Quiz, Error
                deactivate QuizService
                alt Error != Null
                    QuizController -->> Router : 500 Internal Server Error
                    Router -->> Frontend : 500 Internal Server Error
                    Frontend -->> User : Show error "Failed to fetch quiz"
                else
                    QuizController -->> Router : 200 OK
                    Router -->> Frontend : 200 OK
                    Frontend -->> User : Show quiz details
                end
                deactivate QuizController
                deactivate Router
                opt User edits quiz
                  User -> Frontend : handleEditQuizClick(quizId)
                  Frontend -->> User : Show quiz edit form
                  User -> Frontend : handleSubmitQuizEdit(quizId, content, quiz_type, questions, choices, answers)
                  Frontend -> Frontend : Validate quiz data
                  alt Invalid Data
                      Frontend -->> User : Show error "Invalid input"
                  else Valid Data
                    Frontend -> Router: PUT /api/quizzes
                    activate Router
                    Router -> Middleware: .Use(Middleware)
                    activate Middleware
                    Middleware -> Middleware : .Verify()
                    alt Unauthorized (401 Unauthorized)
                      Middleware -->> Router: 401 Unauthorized
                      Router -->> Frontend: 401 Unauthorized
                      Frontend -->> User: Show error "Please log in"
                    else Authorized
                      Middleware -->> Router: Route to Router
                      deactivate Middleware
                      Router -> QuizController: .EditQuiz(quizId, content, quiz_type, questions, choices, answers)
                      activate QuizController
                      QuizController -> QuizService: .EditQuiz(quizId, content, quiz_type, questions, choices, answers)
                      activate QuizService
                     
                      activate Database
                      alt quiz_type == single_choice
                        QuizService -> QuizRepository: .EditSingleChoiceQuiz(courseId, content, questions, choices, answers)
                        QuizRepository -> Database: UPDATE quizzes SET content = @content, questions = @questions, choices = @choices, answers = @answers WHERE id = @quiz_id
                      else quiz_type == multiple_choice
                        QuizService -> QuizRepository: .EditMultipleChoiceQuiz(courseId, content, questions, choices, answers)
                        QuizRepository -> Database: UPDATE quizzes SET content = @content, questions = @questions, choices = @choices, answers = @answers WHERE id = @quiz_id
                      else quiz_type == ordering_choice
                        QuizService -> QuizRepository: .EditOrderingChoiceQuiz(courseId, content, questions, choices, answers)
                        QuizRepository -> Database: UPDATE quizzes SET content = @content, questions = @questions, choices = @choices, answers = @answers WHERE id = @quiz_id
                      else quiz_type == missing_word_choice
                        QuizService -> QuizRepository: .EditMissingWordChoiceQuiz(courseId, content, questions, choices, answers)
                        QuizRepository -> Database: UPDATE quizzes SET content = @content, questions = @questions, choices = @choices, answers = @answers WHERE id = @quiz_id
                      end
                      activate QuizRepository
                      Database -->> QuizRepository : Quiz, Error
                      deactivate Database
                      QuizRepository -->> QuizService : Quiz, Error
                      deactivate QuizRepository
                      QuizService -->> QuizController : Quiz, Error
                      deactivate QuizService
                      alt Error != Null
                        QuizController -->> Router : 500 Internal Server Error
                        Router -->> Frontend : 500 Internal Server Error
                        Frontend -->> User : Show error "Quiz edit failed"
                      else
                        QuizController -->> Router : 200 OK
                        Router -->> Frontend : 200 OK
                        Frontend -->> User : Show success "Quiz edited"
                      end
                      deactivate QuizController
                      deactivate Router
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
@enduml
