@startuml
title Delete Class

actor User
participant ": Frontend" as Frontend
participant ": Router" as Router
participant ": Middleware" as Middleware
participant ": ClassController" as ClassController
participant ": ClassService" as ClassService
participant ": ClassRepository" as ClassRepository

participant ": CourseRepository" as CourseRepository
participant ": LogRepository" as LogRepository
database Database

activate Frontend

Frontend -> Router: GET /api/classes
activate Router

Router -> Middleware: .Use(Middleware)
activate Middleware
Middleware -> Middleware : .Verify()
alt Unauthorized (401 Unauthorized)
  Middleware -->> Router: 401 Unauthorized
  Router -->> Frontend: 401 Unauthorized
  Frontend -->> User: Show error "Please log in"
else Authorized
  Middleware -->> Router: Route to Router
  deactivate Middleware
  Router -> ClassController: .GetAllClasses()
  activate ClassController
  ClassController -> ClassService: .GetAllClasses()
  activate ClassService
  ClassService -> ClassRepository: .GetAllClasses()
  activate ClassRepository
  ClassRepository -> Database: SELECT class_id, user_id, invite_code, title, description, accessibility FROM Classes WHERE user_id = <user_id>;
  activate Database
  Database -->> ClassRepository : Classes, Error
  deactivate Database
  ClassRepository -->> ClassService : Classes, Error
  deactivate ClassRepository
  ClassService -->> ClassController : Classes, Error
  deactivate ClassService
  alt Error != Null
    ClassController -->> Router : 500 Internal Server Error
    Router -->> Frontend : 500 Internal Server Error
    Frontend -->> User : Show error "Failed to fetch classes"
  else Classes == Null
    ClassController -->> Router : 404 Not Found
    Router -->> Frontend : 404 Not Found
    Frontend -->> User : Show message "No classes found"
  else
    ClassController -->> Router : 200 OK
    Router -->> Frontend : 200 OK
    Frontend -->> User : Show classes list
  end
  deactivate ClassController
  deactivate Router

  opt User selects a class to delete
    User -> Frontend: .handleDeleteClassClick(classId)
    Frontend -> Router: GET /api/classes/delete/{classId}
    activate Router

    Router -> Middleware: .Use(Middleware)
    activate Middleware
    Middleware -> Middleware : .Verify()
    alt Unauthorized (401 Unauthorized)
      Middleware -->> Router: 401 Unauthorized
      Router -->> Frontend: 401 Unauthorized
      Frontend -->> User: Show error "Please log in"
    else Authorized
      Middleware -->> Router: Route to Router
      deactivate Middleware
      Router -> ClassController: .GetClassById(classId)
      activate ClassController
      ClassController -> ClassService: .GetClassById(classId)
      activate ClassService
      ClassService -> ClassRepository: .GetClassById(classId)
      activate ClassRepository
      ClassRepository -> Database: SELECT * FROM classes WHERE id = @class_id
      activate Database
      Database -->> ClassRepository : Class, Error
      deactivate Database
      ClassRepository -->> ClassService : Class, Error
      deactivate ClassRepository
      ClassService -->> ClassController : Class, Error
      deactivate ClassService
      alt Error != Null
        ClassController -->> Router : 500 Internal Server Error
        Router -->> Frontend : 500 Internal Server Error
        Frontend -->> User : Show error "Failed to fetch class details"
      else Class == Null
        ClassController -->> Router : 404 Not Found
        Router -->> Frontend : 404 Not Found
        Frontend -->> User : Show message "Class not found"
      else
        ClassController -->> Router : 200 OK
        Router -->> Frontend : 200 OK
        Frontend -->> User : Show delete confirmation
      end
      deactivate ClassController
      deactivate Router

      opt User confirms deletion
        User -> Frontend: .confirmDeleteClass(classId)
        Frontend -> Router: POST /api/classes/{classId}/delete
        activate Router

        Router -> Middleware: .Use(Middleware)
        activate Middleware
        Middleware -> Middleware : .Verify()
        alt Unauthorized (401 Unauthorized)
          Middleware -->> Router: 401 Unauthorized
          Router -->> Frontend: 401 Unauthorized
          Frontend -->> User: Show error "Please log in"
        else Authorized
          Middleware -->> Router: Route to Router
          deactivate Middleware
          Router -> ClassController: .DeleteClass(classId)
          activate ClassController
          ClassController -> ClassService: .DeleteClass(classId)
          activate ClassService
          ClassService -> ClassRepository: .DeleteClass(classId)
          activate ClassRepository
          ClassRepository -> Database: DELETE FROM classes WHERE id = @class_id
          activate Database
          Database -->> ClassRepository : Deleted, Error
          deactivate Database

          ClassRepository -> Database: DELETE FROM user_classes WHERE class_id = @class_id
          activate Database
          Database -->> ClassRepository : Deleted, Error
          deactivate Database




          ClassRepository -->> ClassService : Deleted, Error
          deactivate ClassRepository

          opt Error == Null
            ClassService -> CourseRepository: .DeleteCourse(courseId)
            activate CourseRepository
            CourseRepository -> Database: DELETE FROM courses WHERE id = @course_id
            activate Database
            Database -->> CourseRepository : Deleted, Error
            deactivate Database
            CourseRepository -->> ClassService : Deleted, Error

            CourseRepository -> Database: DELETE FROM user_courses WHERE course_id = @course_id
            activate Database
            Database -->> CourseRepository : Deleted, Error
            deactivate Database
            CourseRepository -->> ClassService: Deleted, Error
            deactivate CourseRepository

            ClassService -> LogRepository: .DeleteClassLogs(classId)
            activate LogRepository

            opt Error == Null
              LogRepository -> Database: DELETE FROM quizzes WHERE course_id = @course_id
              activate Database
              Database -->> LogRepository : Deleted, Error
              LogRepository -> Database: DELETE FROM choice_quizzes WHERE course_id = @course_id
              Database -->> LogRepository : Deleted, Error
              LogRepository -> Database: DELETE FROM choice_answers WHERE course_id = @course_id
              Database -->> LogRepository : Deleted, Error
              LogRepository -> Database: DELETE FROM ordering_quizzes WHERE course_id = @course_id
              Database -->> LogRepository : Deleted, Error
              LogRepository -> Database: DELETE FROM ordering_answers WHERE course_id = @course_id
              Database -->> LogRepository : Deleted, Error
              LogRepository -> Database: DELETE FROM missing_word_quizzes WHERE course_id = @course_id
              Database -->> LogRepository : Deleted, Error
              LogRepository -> Database: DELETE FROM quiz_histories WHERE course_id = @course_id
              Database -->> LogRepository : Deleted, Error
              LogRepository -> Database: DELETE FROM choice_histories WHERE course_id = @course_id
              Database -->> LogRepository : Deleted, Error
              LogRepository -> Database: DELETE FROM ordering_histories WHERE course_id = @course_id
              Database -->> LogRepository : Deleted, Error
              LogRepository -> Database: DELETE FROM missing_word_histories WHERE course_id = @course_id
              Database -->> LogRepository : Deleted, Error
              deactivate Database
              LogRepository -->> ClassService : Deleted, Error
              deactivate LogRepository
            end
          end
          ClassService -->> ClassController : Deleted, Error
          deactivate ClassService


          alt Error != Null
            ClassController -->> Router: 500 Internal Server Error
            Router -->> Frontend: 500 Internal Server Error
            Frontend -->> User: Show error "Failed to delete class"
          else
            ClassController -->> Router: 200 OK
            Router -->> Frontend: 200 OK
            Frontend -->> User: Show success "Class deleted successfully"
          end




        end
      end
    end
  end
end
@enduml
