@startuml
title Edit Class Flow

actor User
participant "Frontend" as FE
participant "Router" as Router
participant "Middleware" as MW
participant "Class Controller" as Controller
participant "Class Service" as Service
participant "Class Repository" as Repository
participant "Database" as DB

'Retrieve Admin Classes'
activate FE
FE -> Router: GET /api/classes?admin=true
activate Router
Router -> MW: validateSession()
activate MW
MW -> Controller: getAdminClasses(userID)
deactivate MW
activate Controller
Controller -> Service: getAdminClasses(userID)
activate Service
Service -> Repository: selectClassesByAdmin(userID)
activate Repository
Repository -> DB: SELECT id, name, description, privacy FROM classes WHERE owner_id = ?
activate DB
DB --> Repository: classList
deactivate DB
alt No classes found (2b.1)
    Repository --> Service: emptyList
    deactivate Repository
    Service -> Controller: returnError("ไม่พบข้อมูล class")
    deactivate Service
    Controller -> Router: errorResponse(404, "ไม่พบข้อมูล class")
    Router -> FE: errorResponse(404, "ไม่พบข้อมูล class")
else Classes found (2a.1)
    Repository --> Service: classList
    deactivate Repository
    Service --> Controller: classList
    deactivate Service
    Controller --> Router: successResponse(200, classList)
    deactivate Controller
    Router --> FE: successResponse(200, classList)
end
deactivate Router
FE -> User: displayClassesList(classList)

'Edit Class'
User -> FE: selectClass(classID)
FE -> FE: displayEditForm(classDetails)

User -> FE: submitEditForm(updatedData, classID)
FE -> Router: POST /api/classes/edit {classID, updatedData}
activate Router
Router -> MW: validateRequest()
activate MW
MW -> Controller: editClass(classID, updatedData)
deactivate MW
activate Controller
Controller -> Controller: validateUpdatedData(updatedData)
alt invalidData (7b.1)
    Controller -> Router: returnError("ข้อมูลไม่ครบถ้วนหรือข้อมูลไม่ถูกต้อง")
    Router -> FE: errorResponse(400, "ข้อมูลไม่ครบถ้วนหรือข้อมูลไม่ถูกต้อง")
    deactivate Controller
    deactivate Router
else validData (7a.1)
    Controller -> Service: editClass(classID, updatedData)
    activate Service
    Service -> Repository: updateClass(classID, updatedData)
    activate Repository
    Repository -> DB: UPDATE classes SET name=?, description=?, privacy=? WHERE id=?
    activate DB
    DB --> Repository: affectedRows
    deactivate DB
    alt updateFailure (9b.1)
        Repository -> Service: returnError("Edit failed")
        deactivate Repository
        Service -> Controller: returnError("Edit failed")
        deactivate Service
        Controller -> Router: errorResponse(500, "Edit failed")
        Router -> FE: errorResponse(500, "Edit failed")
        deactivate Controller
        deactivate MW
        deactivate Router
    else updateSuccess (9a.1)
        Repository --> Service: returnClassRecord(updatedClass)
        deactivate Repository
        Service --> Controller: returnClassRecord(updatedClass)
        deactivate Service
        Controller -> Router: successResponse(200, "Edit class successful", updatedClass)
        Router -> FE: successResponse(200, "Edit class successful", updatedClass)
        FE -> User: displayMessage("Edit class successful")
        deactivate Controller
        deactivate MW
        deactivate Router
    end
end
deactivate FE

@enduml
