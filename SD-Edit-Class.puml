@startuml
title Edit Class Flow

actor User
participant "Frontend" as FE
participant "Router" as Router
participant "Middleware" as MW
participant "Class Controller" as Controller
participant "Class Service" as Service
participant "Class Repository" as Repository
participant "Database" as DB

'Retrieve Admin Classes'
activate FE
FE -> Router: GET /api/classes?admin=true
activate Router
Router -> MW: validateSession()
activate MW
MW -> Controller: getAdminClasses(userID)
activate Controller
Controller -> Service: getAdminClasses(userID)
activate Service
Service -> Repository: selectClassesByAdmin(userID)
activate Repository
Repository -> DB: SELECT id, name, description, privacy FROM classes WHERE owner_id = ?
activate DB
DB --> Repository: classList
deactivate DB
Repository --> Service: classList
deactivate Repository
Service --> Controller: classList
deactivate Service
Controller --> MW: returnSuccess(classList)
deactivate Controller
MW --> Router: successResponse(200, classList)
deactivate MW
Router --> FE: successResponse(200, classList)
deactivate Router
FE -> User: displayClassesList(classList)

'Edit Class'
User -> FE: selectClass(classID)
FE -> FE: displayEditForm(classDetails)

User -> FE: submitEditForm(updatedData, classID)
FE -> Router: POST /api/classes/edit {classID, updatedData}
activate Router
Router -> MW: validateRequest()
activate MW
MW -> Controller: editClass(classID, updatedData)
activate Controller
Controller -> Controller: validateUpdatedData(updatedData)
alt invalidData (7.1a)
    Controller -> MW: returnError("Data incomplete/incorrect")
    MW -> Router: errorResponse(400, "Data incomplete/incorrect")
    Router -> FE: errorResponse(400, "Data incomplete/incorrect")
    deactivate Controller
    deactivate MW
    deactivate Router
else validData (7.1)
    Controller -> Service: editClass(classID, updatedData)
    activate Service
    Service -> Repository: updateClass(classID, updatedData)
    activate Repository
    Repository -> DB: UPDATE classes SET name=?, description=?, privacy=? WHERE id=?
    activate DB
    DB --> Repository: affectedRows
    deactivate DB
    alt updateFailure (8.1a)
        Repository -> Service: returnError("Edit class failed")
        deactivate Repository
        Service -> Controller: returnError("Edit class failed")
        deactivate Service
        Controller -> MW: returnError("Edit class failed")
        MW -> Router: errorResponse(500, "Edit class failed")
        Router -> FE: errorResponse(500, "Edit class failed")
        deactivate Controller
        deactivate MW
        deactivate Router
    else updateSuccess (8.1)
        Repository -> Service: returnClassRecord(updatedClass)
        deactivate Repository
        Service -> Controller: returnClassRecord(updatedClass)
        deactivate Service
        Controller -> MW: returnSuccess("Edit class successful", updatedClass)
        MW -> Router: successResponse(200, "Edit class successful", updatedClass)
        Router -> FE: successResponse(200, "Edit class successful", updatedClass)
        FE -> User: displayMessage("Edit class successful")
        deactivate Controller
        deactivate MW
        deactivate Router
    end
end
deactivate FE

@enduml
